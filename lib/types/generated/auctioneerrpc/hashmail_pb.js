// source: auctioneerrpc/hashmail.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.poolrpc.CipherBox', null, global);
goog.exportSymbol('proto.poolrpc.CipherBoxAuth', null, global);
goog.exportSymbol('proto.poolrpc.CipherBoxAuth.AuthCase', null, global);
goog.exportSymbol('proto.poolrpc.CipherBoxDesc', null, global);
goog.exportSymbol('proto.poolrpc.CipherChallenge', null, global);
goog.exportSymbol('proto.poolrpc.CipherError', null, global);
goog.exportSymbol('proto.poolrpc.CipherInitResp', null, global);
goog.exportSymbol('proto.poolrpc.CipherInitResp.RespCase', null, global);
goog.exportSymbol('proto.poolrpc.CipherSuccess', null, global);
goog.exportSymbol('proto.poolrpc.DelCipherBoxResp', null, global);
goog.exportSymbol('proto.poolrpc.PoolAccountAuth', null, global);
goog.exportSymbol('proto.poolrpc.SidecarAuth', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.poolrpc.PoolAccountAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.poolrpc.PoolAccountAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.poolrpc.PoolAccountAuth.displayName = 'proto.poolrpc.PoolAccountAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.poolrpc.SidecarAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.poolrpc.SidecarAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.poolrpc.SidecarAuth.displayName = 'proto.poolrpc.SidecarAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.poolrpc.CipherBoxAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.poolrpc.CipherBoxAuth.oneofGroups_);
};
goog.inherits(proto.poolrpc.CipherBoxAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.poolrpc.CipherBoxAuth.displayName = 'proto.poolrpc.CipherBoxAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.poolrpc.DelCipherBoxResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.poolrpc.DelCipherBoxResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.poolrpc.DelCipherBoxResp.displayName = 'proto.poolrpc.DelCipherBoxResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.poolrpc.CipherChallenge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.poolrpc.CipherChallenge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.poolrpc.CipherChallenge.displayName = 'proto.poolrpc.CipherChallenge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.poolrpc.CipherError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.poolrpc.CipherError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.poolrpc.CipherError.displayName = 'proto.poolrpc.CipherError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.poolrpc.CipherSuccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.poolrpc.CipherSuccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.poolrpc.CipherSuccess.displayName = 'proto.poolrpc.CipherSuccess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.poolrpc.CipherInitResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.poolrpc.CipherInitResp.oneofGroups_);
};
goog.inherits(proto.poolrpc.CipherInitResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.poolrpc.CipherInitResp.displayName = 'proto.poolrpc.CipherInitResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.poolrpc.CipherBoxDesc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.poolrpc.CipherBoxDesc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.poolrpc.CipherBoxDesc.displayName = 'proto.poolrpc.CipherBoxDesc';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.poolrpc.CipherBox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.poolrpc.CipherBox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.poolrpc.CipherBox.displayName = 'proto.poolrpc.CipherBox';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.poolrpc.PoolAccountAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.poolrpc.PoolAccountAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.poolrpc.PoolAccountAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.PoolAccountAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    acctKey: msg.getAcctKey_asB64(),
    streamSig: msg.getStreamSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.poolrpc.PoolAccountAuth}
 */
proto.poolrpc.PoolAccountAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.poolrpc.PoolAccountAuth;
  return proto.poolrpc.PoolAccountAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.poolrpc.PoolAccountAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.poolrpc.PoolAccountAuth}
 */
proto.poolrpc.PoolAccountAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAcctKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStreamSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.poolrpc.PoolAccountAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.poolrpc.PoolAccountAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.poolrpc.PoolAccountAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.PoolAccountAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAcctKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStreamSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes acct_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.poolrpc.PoolAccountAuth.prototype.getAcctKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes acct_key = 1;
 * This is a type-conversion wrapper around `getAcctKey()`
 * @return {string}
 */
proto.poolrpc.PoolAccountAuth.prototype.getAcctKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAcctKey()));
};


/**
 * optional bytes acct_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAcctKey()`
 * @return {!Uint8Array}
 */
proto.poolrpc.PoolAccountAuth.prototype.getAcctKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAcctKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.poolrpc.PoolAccountAuth} returns this
 */
proto.poolrpc.PoolAccountAuth.prototype.setAcctKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes stream_sig = 2;
 * @return {!(string|Uint8Array)}
 */
proto.poolrpc.PoolAccountAuth.prototype.getStreamSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes stream_sig = 2;
 * This is a type-conversion wrapper around `getStreamSig()`
 * @return {string}
 */
proto.poolrpc.PoolAccountAuth.prototype.getStreamSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStreamSig()));
};


/**
 * optional bytes stream_sig = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStreamSig()`
 * @return {!Uint8Array}
 */
proto.poolrpc.PoolAccountAuth.prototype.getStreamSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStreamSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.poolrpc.PoolAccountAuth} returns this
 */
proto.poolrpc.PoolAccountAuth.prototype.setStreamSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.poolrpc.SidecarAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.poolrpc.SidecarAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.poolrpc.SidecarAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.SidecarAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticket: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.poolrpc.SidecarAuth}
 */
proto.poolrpc.SidecarAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.poolrpc.SidecarAuth;
  return proto.poolrpc.SidecarAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.poolrpc.SidecarAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.poolrpc.SidecarAuth}
 */
proto.poolrpc.SidecarAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.poolrpc.SidecarAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.poolrpc.SidecarAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.poolrpc.SidecarAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.SidecarAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ticket = 1;
 * @return {string}
 */
proto.poolrpc.SidecarAuth.prototype.getTicket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.poolrpc.SidecarAuth} returns this
 */
proto.poolrpc.SidecarAuth.prototype.setTicket = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.poolrpc.CipherBoxAuth.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.poolrpc.CipherBoxAuth.AuthCase = {
  AUTH_NOT_SET: 0,
  ACCT_AUTH: 2,
  SIDECAR_AUTH: 3
};

/**
 * @return {proto.poolrpc.CipherBoxAuth.AuthCase}
 */
proto.poolrpc.CipherBoxAuth.prototype.getAuthCase = function() {
  return /** @type {proto.poolrpc.CipherBoxAuth.AuthCase} */(jspb.Message.computeOneofCase(this, proto.poolrpc.CipherBoxAuth.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.poolrpc.CipherBoxAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.poolrpc.CipherBoxAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.poolrpc.CipherBoxAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.CipherBoxAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    desc: (f = msg.getDesc()) && proto.poolrpc.CipherBoxDesc.toObject(includeInstance, f),
    acctAuth: (f = msg.getAcctAuth()) && proto.poolrpc.PoolAccountAuth.toObject(includeInstance, f),
    sidecarAuth: (f = msg.getSidecarAuth()) && proto.poolrpc.SidecarAuth.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.poolrpc.CipherBoxAuth}
 */
proto.poolrpc.CipherBoxAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.poolrpc.CipherBoxAuth;
  return proto.poolrpc.CipherBoxAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.poolrpc.CipherBoxAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.poolrpc.CipherBoxAuth}
 */
proto.poolrpc.CipherBoxAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.poolrpc.CipherBoxDesc;
      reader.readMessage(value,proto.poolrpc.CipherBoxDesc.deserializeBinaryFromReader);
      msg.setDesc(value);
      break;
    case 2:
      var value = new proto.poolrpc.PoolAccountAuth;
      reader.readMessage(value,proto.poolrpc.PoolAccountAuth.deserializeBinaryFromReader);
      msg.setAcctAuth(value);
      break;
    case 3:
      var value = new proto.poolrpc.SidecarAuth;
      reader.readMessage(value,proto.poolrpc.SidecarAuth.deserializeBinaryFromReader);
      msg.setSidecarAuth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.poolrpc.CipherBoxAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.poolrpc.CipherBoxAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.poolrpc.CipherBoxAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.CipherBoxAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDesc();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.poolrpc.CipherBoxDesc.serializeBinaryToWriter
    );
  }
  f = message.getAcctAuth();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.poolrpc.PoolAccountAuth.serializeBinaryToWriter
    );
  }
  f = message.getSidecarAuth();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.poolrpc.SidecarAuth.serializeBinaryToWriter
    );
  }
};


/**
 * optional CipherBoxDesc desc = 1;
 * @return {?proto.poolrpc.CipherBoxDesc}
 */
proto.poolrpc.CipherBoxAuth.prototype.getDesc = function() {
  return /** @type{?proto.poolrpc.CipherBoxDesc} */ (
    jspb.Message.getWrapperField(this, proto.poolrpc.CipherBoxDesc, 1));
};


/**
 * @param {?proto.poolrpc.CipherBoxDesc|undefined} value
 * @return {!proto.poolrpc.CipherBoxAuth} returns this
*/
proto.poolrpc.CipherBoxAuth.prototype.setDesc = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.poolrpc.CipherBoxAuth} returns this
 */
proto.poolrpc.CipherBoxAuth.prototype.clearDesc = function() {
  return this.setDesc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.poolrpc.CipherBoxAuth.prototype.hasDesc = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PoolAccountAuth acct_auth = 2;
 * @return {?proto.poolrpc.PoolAccountAuth}
 */
proto.poolrpc.CipherBoxAuth.prototype.getAcctAuth = function() {
  return /** @type{?proto.poolrpc.PoolAccountAuth} */ (
    jspb.Message.getWrapperField(this, proto.poolrpc.PoolAccountAuth, 2));
};


/**
 * @param {?proto.poolrpc.PoolAccountAuth|undefined} value
 * @return {!proto.poolrpc.CipherBoxAuth} returns this
*/
proto.poolrpc.CipherBoxAuth.prototype.setAcctAuth = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.poolrpc.CipherBoxAuth.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.poolrpc.CipherBoxAuth} returns this
 */
proto.poolrpc.CipherBoxAuth.prototype.clearAcctAuth = function() {
  return this.setAcctAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.poolrpc.CipherBoxAuth.prototype.hasAcctAuth = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SidecarAuth sidecar_auth = 3;
 * @return {?proto.poolrpc.SidecarAuth}
 */
proto.poolrpc.CipherBoxAuth.prototype.getSidecarAuth = function() {
  return /** @type{?proto.poolrpc.SidecarAuth} */ (
    jspb.Message.getWrapperField(this, proto.poolrpc.SidecarAuth, 3));
};


/**
 * @param {?proto.poolrpc.SidecarAuth|undefined} value
 * @return {!proto.poolrpc.CipherBoxAuth} returns this
*/
proto.poolrpc.CipherBoxAuth.prototype.setSidecarAuth = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.poolrpc.CipherBoxAuth.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.poolrpc.CipherBoxAuth} returns this
 */
proto.poolrpc.CipherBoxAuth.prototype.clearSidecarAuth = function() {
  return this.setSidecarAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.poolrpc.CipherBoxAuth.prototype.hasSidecarAuth = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.poolrpc.DelCipherBoxResp.prototype.toObject = function(opt_includeInstance) {
  return proto.poolrpc.DelCipherBoxResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.poolrpc.DelCipherBoxResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.DelCipherBoxResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.poolrpc.DelCipherBoxResp}
 */
proto.poolrpc.DelCipherBoxResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.poolrpc.DelCipherBoxResp;
  return proto.poolrpc.DelCipherBoxResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.poolrpc.DelCipherBoxResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.poolrpc.DelCipherBoxResp}
 */
proto.poolrpc.DelCipherBoxResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.poolrpc.DelCipherBoxResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.poolrpc.DelCipherBoxResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.poolrpc.DelCipherBoxResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.DelCipherBoxResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.poolrpc.CipherChallenge.prototype.toObject = function(opt_includeInstance) {
  return proto.poolrpc.CipherChallenge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.poolrpc.CipherChallenge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.CipherChallenge.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.poolrpc.CipherChallenge}
 */
proto.poolrpc.CipherChallenge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.poolrpc.CipherChallenge;
  return proto.poolrpc.CipherChallenge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.poolrpc.CipherChallenge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.poolrpc.CipherChallenge}
 */
proto.poolrpc.CipherChallenge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.poolrpc.CipherChallenge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.poolrpc.CipherChallenge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.poolrpc.CipherChallenge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.CipherChallenge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.poolrpc.CipherError.prototype.toObject = function(opt_includeInstance) {
  return proto.poolrpc.CipherError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.poolrpc.CipherError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.CipherError.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.poolrpc.CipherError}
 */
proto.poolrpc.CipherError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.poolrpc.CipherError;
  return proto.poolrpc.CipherError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.poolrpc.CipherError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.poolrpc.CipherError}
 */
proto.poolrpc.CipherError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.poolrpc.CipherError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.poolrpc.CipherError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.poolrpc.CipherError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.CipherError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.poolrpc.CipherSuccess.prototype.toObject = function(opt_includeInstance) {
  return proto.poolrpc.CipherSuccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.poolrpc.CipherSuccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.CipherSuccess.toObject = function(includeInstance, msg) {
  var f, obj = {
    desc: (f = msg.getDesc()) && proto.poolrpc.CipherBoxDesc.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.poolrpc.CipherSuccess}
 */
proto.poolrpc.CipherSuccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.poolrpc.CipherSuccess;
  return proto.poolrpc.CipherSuccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.poolrpc.CipherSuccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.poolrpc.CipherSuccess}
 */
proto.poolrpc.CipherSuccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.poolrpc.CipherBoxDesc;
      reader.readMessage(value,proto.poolrpc.CipherBoxDesc.deserializeBinaryFromReader);
      msg.setDesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.poolrpc.CipherSuccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.poolrpc.CipherSuccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.poolrpc.CipherSuccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.CipherSuccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDesc();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.poolrpc.CipherBoxDesc.serializeBinaryToWriter
    );
  }
};


/**
 * optional CipherBoxDesc desc = 1;
 * @return {?proto.poolrpc.CipherBoxDesc}
 */
proto.poolrpc.CipherSuccess.prototype.getDesc = function() {
  return /** @type{?proto.poolrpc.CipherBoxDesc} */ (
    jspb.Message.getWrapperField(this, proto.poolrpc.CipherBoxDesc, 1));
};


/**
 * @param {?proto.poolrpc.CipherBoxDesc|undefined} value
 * @return {!proto.poolrpc.CipherSuccess} returns this
*/
proto.poolrpc.CipherSuccess.prototype.setDesc = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.poolrpc.CipherSuccess} returns this
 */
proto.poolrpc.CipherSuccess.prototype.clearDesc = function() {
  return this.setDesc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.poolrpc.CipherSuccess.prototype.hasDesc = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.poolrpc.CipherInitResp.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.poolrpc.CipherInitResp.RespCase = {
  RESP_NOT_SET: 0,
  SUCCESS: 1,
  CHALLENGE: 2,
  ERROR: 3
};

/**
 * @return {proto.poolrpc.CipherInitResp.RespCase}
 */
proto.poolrpc.CipherInitResp.prototype.getRespCase = function() {
  return /** @type {proto.poolrpc.CipherInitResp.RespCase} */(jspb.Message.computeOneofCase(this, proto.poolrpc.CipherInitResp.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.poolrpc.CipherInitResp.prototype.toObject = function(opt_includeInstance) {
  return proto.poolrpc.CipherInitResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.poolrpc.CipherInitResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.CipherInitResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: (f = msg.getSuccess()) && proto.poolrpc.CipherSuccess.toObject(includeInstance, f),
    challenge: (f = msg.getChallenge()) && proto.poolrpc.CipherChallenge.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.poolrpc.CipherError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.poolrpc.CipherInitResp}
 */
proto.poolrpc.CipherInitResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.poolrpc.CipherInitResp;
  return proto.poolrpc.CipherInitResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.poolrpc.CipherInitResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.poolrpc.CipherInitResp}
 */
proto.poolrpc.CipherInitResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.poolrpc.CipherSuccess;
      reader.readMessage(value,proto.poolrpc.CipherSuccess.deserializeBinaryFromReader);
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.poolrpc.CipherChallenge;
      reader.readMessage(value,proto.poolrpc.CipherChallenge.deserializeBinaryFromReader);
      msg.setChallenge(value);
      break;
    case 3:
      var value = new proto.poolrpc.CipherError;
      reader.readMessage(value,proto.poolrpc.CipherError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.poolrpc.CipherInitResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.poolrpc.CipherInitResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.poolrpc.CipherInitResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.CipherInitResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.poolrpc.CipherSuccess.serializeBinaryToWriter
    );
  }
  f = message.getChallenge();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.poolrpc.CipherChallenge.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.poolrpc.CipherError.serializeBinaryToWriter
    );
  }
};


/**
 * optional CipherSuccess success = 1;
 * @return {?proto.poolrpc.CipherSuccess}
 */
proto.poolrpc.CipherInitResp.prototype.getSuccess = function() {
  return /** @type{?proto.poolrpc.CipherSuccess} */ (
    jspb.Message.getWrapperField(this, proto.poolrpc.CipherSuccess, 1));
};


/**
 * @param {?proto.poolrpc.CipherSuccess|undefined} value
 * @return {!proto.poolrpc.CipherInitResp} returns this
*/
proto.poolrpc.CipherInitResp.prototype.setSuccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.poolrpc.CipherInitResp.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.poolrpc.CipherInitResp} returns this
 */
proto.poolrpc.CipherInitResp.prototype.clearSuccess = function() {
  return this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.poolrpc.CipherInitResp.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CipherChallenge challenge = 2;
 * @return {?proto.poolrpc.CipherChallenge}
 */
proto.poolrpc.CipherInitResp.prototype.getChallenge = function() {
  return /** @type{?proto.poolrpc.CipherChallenge} */ (
    jspb.Message.getWrapperField(this, proto.poolrpc.CipherChallenge, 2));
};


/**
 * @param {?proto.poolrpc.CipherChallenge|undefined} value
 * @return {!proto.poolrpc.CipherInitResp} returns this
*/
proto.poolrpc.CipherInitResp.prototype.setChallenge = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.poolrpc.CipherInitResp.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.poolrpc.CipherInitResp} returns this
 */
proto.poolrpc.CipherInitResp.prototype.clearChallenge = function() {
  return this.setChallenge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.poolrpc.CipherInitResp.prototype.hasChallenge = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CipherError error = 3;
 * @return {?proto.poolrpc.CipherError}
 */
proto.poolrpc.CipherInitResp.prototype.getError = function() {
  return /** @type{?proto.poolrpc.CipherError} */ (
    jspb.Message.getWrapperField(this, proto.poolrpc.CipherError, 3));
};


/**
 * @param {?proto.poolrpc.CipherError|undefined} value
 * @return {!proto.poolrpc.CipherInitResp} returns this
*/
proto.poolrpc.CipherInitResp.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.poolrpc.CipherInitResp.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.poolrpc.CipherInitResp} returns this
 */
proto.poolrpc.CipherInitResp.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.poolrpc.CipherInitResp.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.poolrpc.CipherBoxDesc.prototype.toObject = function(opt_includeInstance) {
  return proto.poolrpc.CipherBoxDesc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.poolrpc.CipherBoxDesc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.CipherBoxDesc.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamId: msg.getStreamId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.poolrpc.CipherBoxDesc}
 */
proto.poolrpc.CipherBoxDesc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.poolrpc.CipherBoxDesc;
  return proto.poolrpc.CipherBoxDesc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.poolrpc.CipherBoxDesc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.poolrpc.CipherBoxDesc}
 */
proto.poolrpc.CipherBoxDesc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStreamId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.poolrpc.CipherBoxDesc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.poolrpc.CipherBoxDesc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.poolrpc.CipherBoxDesc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.CipherBoxDesc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes stream_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.poolrpc.CipherBoxDesc.prototype.getStreamId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes stream_id = 1;
 * This is a type-conversion wrapper around `getStreamId()`
 * @return {string}
 */
proto.poolrpc.CipherBoxDesc.prototype.getStreamId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStreamId()));
};


/**
 * optional bytes stream_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStreamId()`
 * @return {!Uint8Array}
 */
proto.poolrpc.CipherBoxDesc.prototype.getStreamId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStreamId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.poolrpc.CipherBoxDesc} returns this
 */
proto.poolrpc.CipherBoxDesc.prototype.setStreamId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.poolrpc.CipherBox.prototype.toObject = function(opt_includeInstance) {
  return proto.poolrpc.CipherBox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.poolrpc.CipherBox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.CipherBox.toObject = function(includeInstance, msg) {
  var f, obj = {
    desc: (f = msg.getDesc()) && proto.poolrpc.CipherBoxDesc.toObject(includeInstance, f),
    msg: msg.getMsg_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.poolrpc.CipherBox}
 */
proto.poolrpc.CipherBox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.poolrpc.CipherBox;
  return proto.poolrpc.CipherBox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.poolrpc.CipherBox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.poolrpc.CipherBox}
 */
proto.poolrpc.CipherBox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.poolrpc.CipherBoxDesc;
      reader.readMessage(value,proto.poolrpc.CipherBoxDesc.deserializeBinaryFromReader);
      msg.setDesc(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.poolrpc.CipherBox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.poolrpc.CipherBox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.poolrpc.CipherBox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.poolrpc.CipherBox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDesc();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.poolrpc.CipherBoxDesc.serializeBinaryToWriter
    );
  }
  f = message.getMsg_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional CipherBoxDesc desc = 1;
 * @return {?proto.poolrpc.CipherBoxDesc}
 */
proto.poolrpc.CipherBox.prototype.getDesc = function() {
  return /** @type{?proto.poolrpc.CipherBoxDesc} */ (
    jspb.Message.getWrapperField(this, proto.poolrpc.CipherBoxDesc, 1));
};


/**
 * @param {?proto.poolrpc.CipherBoxDesc|undefined} value
 * @return {!proto.poolrpc.CipherBox} returns this
*/
proto.poolrpc.CipherBox.prototype.setDesc = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.poolrpc.CipherBox} returns this
 */
proto.poolrpc.CipherBox.prototype.clearDesc = function() {
  return this.setDesc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.poolrpc.CipherBox.prototype.hasDesc = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes msg = 2;
 * @return {!(string|Uint8Array)}
 */
proto.poolrpc.CipherBox.prototype.getMsg = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes msg = 2;
 * This is a type-conversion wrapper around `getMsg()`
 * @return {string}
 */
proto.poolrpc.CipherBox.prototype.getMsg_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsg()));
};


/**
 * optional bytes msg = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsg()`
 * @return {!Uint8Array}
 */
proto.poolrpc.CipherBox.prototype.getMsg_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsg()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.poolrpc.CipherBox} returns this
 */
proto.poolrpc.CipherBox.prototype.setMsg = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


goog.object.extend(exports, proto.poolrpc);
