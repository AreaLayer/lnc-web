// source: signrpc/signer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.signrpc.InputScript', null, global);
goog.exportSymbol('proto.signrpc.InputScriptResp', null, global);
goog.exportSymbol('proto.signrpc.KeyDescriptor', null, global);
goog.exportSymbol('proto.signrpc.KeyLocator', null, global);
goog.exportSymbol('proto.signrpc.SharedKeyRequest', null, global);
goog.exportSymbol('proto.signrpc.SharedKeyResponse', null, global);
goog.exportSymbol('proto.signrpc.SignDescriptor', null, global);
goog.exportSymbol('proto.signrpc.SignMessageReq', null, global);
goog.exportSymbol('proto.signrpc.SignMessageResp', null, global);
goog.exportSymbol('proto.signrpc.SignReq', null, global);
goog.exportSymbol('proto.signrpc.SignResp', null, global);
goog.exportSymbol('proto.signrpc.TxOut', null, global);
goog.exportSymbol('proto.signrpc.VerifyMessageReq', null, global);
goog.exportSymbol('proto.signrpc.VerifyMessageResp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signrpc.KeyLocator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signrpc.KeyLocator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.signrpc.KeyLocator.displayName = 'proto.signrpc.KeyLocator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signrpc.KeyDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signrpc.KeyDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.signrpc.KeyDescriptor.displayName = 'proto.signrpc.KeyDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signrpc.TxOut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signrpc.TxOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.signrpc.TxOut.displayName = 'proto.signrpc.TxOut';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signrpc.SignDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signrpc.SignDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.signrpc.SignDescriptor.displayName = 'proto.signrpc.SignDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signrpc.SignReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.signrpc.SignReq.repeatedFields_, null);
};
goog.inherits(proto.signrpc.SignReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.signrpc.SignReq.displayName = 'proto.signrpc.SignReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signrpc.SignResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.signrpc.SignResp.repeatedFields_, null);
};
goog.inherits(proto.signrpc.SignResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.signrpc.SignResp.displayName = 'proto.signrpc.SignResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signrpc.InputScript = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.signrpc.InputScript.repeatedFields_, null);
};
goog.inherits(proto.signrpc.InputScript, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.signrpc.InputScript.displayName = 'proto.signrpc.InputScript';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signrpc.InputScriptResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.signrpc.InputScriptResp.repeatedFields_, null);
};
goog.inherits(proto.signrpc.InputScriptResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.signrpc.InputScriptResp.displayName = 'proto.signrpc.InputScriptResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signrpc.SignMessageReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signrpc.SignMessageReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.signrpc.SignMessageReq.displayName = 'proto.signrpc.SignMessageReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signrpc.SignMessageResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signrpc.SignMessageResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.signrpc.SignMessageResp.displayName = 'proto.signrpc.SignMessageResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signrpc.VerifyMessageReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signrpc.VerifyMessageReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.signrpc.VerifyMessageReq.displayName = 'proto.signrpc.VerifyMessageReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signrpc.VerifyMessageResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signrpc.VerifyMessageResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.signrpc.VerifyMessageResp.displayName = 'proto.signrpc.VerifyMessageResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signrpc.SharedKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signrpc.SharedKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.signrpc.SharedKeyRequest.displayName = 'proto.signrpc.SharedKeyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.signrpc.SharedKeyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.signrpc.SharedKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.signrpc.SharedKeyResponse.displayName = 'proto.signrpc.SharedKeyResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signrpc.KeyLocator.prototype.toObject = function(opt_includeInstance) {
  return proto.signrpc.KeyLocator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signrpc.KeyLocator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.KeyLocator.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyFamily: jspb.Message.getFieldWithDefault(msg, 1, 0),
    keyIndex: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signrpc.KeyLocator}
 */
proto.signrpc.KeyLocator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signrpc.KeyLocator;
  return proto.signrpc.KeyLocator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signrpc.KeyLocator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signrpc.KeyLocator}
 */
proto.signrpc.KeyLocator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKeyFamily(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKeyIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signrpc.KeyLocator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signrpc.KeyLocator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signrpc.KeyLocator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.KeyLocator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyFamily();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getKeyIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 key_family = 1;
 * @return {number}
 */
proto.signrpc.KeyLocator.prototype.getKeyFamily = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.signrpc.KeyLocator} returns this
 */
proto.signrpc.KeyLocator.prototype.setKeyFamily = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 key_index = 2;
 * @return {number}
 */
proto.signrpc.KeyLocator.prototype.getKeyIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.signrpc.KeyLocator} returns this
 */
proto.signrpc.KeyLocator.prototype.setKeyIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signrpc.KeyDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.signrpc.KeyDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signrpc.KeyDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.KeyDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    rawKeyBytes: msg.getRawKeyBytes_asB64(),
    keyLoc: (f = msg.getKeyLoc()) && proto.signrpc.KeyLocator.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signrpc.KeyDescriptor}
 */
proto.signrpc.KeyDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signrpc.KeyDescriptor;
  return proto.signrpc.KeyDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signrpc.KeyDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signrpc.KeyDescriptor}
 */
proto.signrpc.KeyDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawKeyBytes(value);
      break;
    case 2:
      var value = new proto.signrpc.KeyLocator;
      reader.readMessage(value,proto.signrpc.KeyLocator.deserializeBinaryFromReader);
      msg.setKeyLoc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signrpc.KeyDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signrpc.KeyDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signrpc.KeyDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.KeyDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRawKeyBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKeyLoc();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.signrpc.KeyLocator.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes raw_key_bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.signrpc.KeyDescriptor.prototype.getRawKeyBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes raw_key_bytes = 1;
 * This is a type-conversion wrapper around `getRawKeyBytes()`
 * @return {string}
 */
proto.signrpc.KeyDescriptor.prototype.getRawKeyBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawKeyBytes()));
};


/**
 * optional bytes raw_key_bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawKeyBytes()`
 * @return {!Uint8Array}
 */
proto.signrpc.KeyDescriptor.prototype.getRawKeyBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawKeyBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.signrpc.KeyDescriptor} returns this
 */
proto.signrpc.KeyDescriptor.prototype.setRawKeyBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional KeyLocator key_loc = 2;
 * @return {?proto.signrpc.KeyLocator}
 */
proto.signrpc.KeyDescriptor.prototype.getKeyLoc = function() {
  return /** @type{?proto.signrpc.KeyLocator} */ (
    jspb.Message.getWrapperField(this, proto.signrpc.KeyLocator, 2));
};


/**
 * @param {?proto.signrpc.KeyLocator|undefined} value
 * @return {!proto.signrpc.KeyDescriptor} returns this
*/
proto.signrpc.KeyDescriptor.prototype.setKeyLoc = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.signrpc.KeyDescriptor} returns this
 */
proto.signrpc.KeyDescriptor.prototype.clearKeyLoc = function() {
  return this.setKeyLoc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.signrpc.KeyDescriptor.prototype.hasKeyLoc = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signrpc.TxOut.prototype.toObject = function(opt_includeInstance) {
  return proto.signrpc.TxOut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signrpc.TxOut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.TxOut.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pkScript: msg.getPkScript_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signrpc.TxOut}
 */
proto.signrpc.TxOut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signrpc.TxOut;
  return proto.signrpc.TxOut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signrpc.TxOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signrpc.TxOut}
 */
proto.signrpc.TxOut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPkScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signrpc.TxOut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signrpc.TxOut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signrpc.TxOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.TxOut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPkScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional int64 value = 1;
 * @return {number}
 */
proto.signrpc.TxOut.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.signrpc.TxOut} returns this
 */
proto.signrpc.TxOut.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes pk_script = 2;
 * @return {!(string|Uint8Array)}
 */
proto.signrpc.TxOut.prototype.getPkScript = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes pk_script = 2;
 * This is a type-conversion wrapper around `getPkScript()`
 * @return {string}
 */
proto.signrpc.TxOut.prototype.getPkScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPkScript()));
};


/**
 * optional bytes pk_script = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPkScript()`
 * @return {!Uint8Array}
 */
proto.signrpc.TxOut.prototype.getPkScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPkScript()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.signrpc.TxOut} returns this
 */
proto.signrpc.TxOut.prototype.setPkScript = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signrpc.SignDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.signrpc.SignDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signrpc.SignDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.SignDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyDesc: (f = msg.getKeyDesc()) && proto.signrpc.KeyDescriptor.toObject(includeInstance, f),
    singleTweak: msg.getSingleTweak_asB64(),
    doubleTweak: msg.getDoubleTweak_asB64(),
    witnessScript: msg.getWitnessScript_asB64(),
    output: (f = msg.getOutput()) && proto.signrpc.TxOut.toObject(includeInstance, f),
    sighash: jspb.Message.getFieldWithDefault(msg, 7, 0),
    inputIndex: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signrpc.SignDescriptor}
 */
proto.signrpc.SignDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signrpc.SignDescriptor;
  return proto.signrpc.SignDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signrpc.SignDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signrpc.SignDescriptor}
 */
proto.signrpc.SignDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.signrpc.KeyDescriptor;
      reader.readMessage(value,proto.signrpc.KeyDescriptor.deserializeBinaryFromReader);
      msg.setKeyDesc(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSingleTweak(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDoubleTweak(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWitnessScript(value);
      break;
    case 5:
      var value = new proto.signrpc.TxOut;
      reader.readMessage(value,proto.signrpc.TxOut.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSighash(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInputIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signrpc.SignDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signrpc.SignDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signrpc.SignDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.SignDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyDesc();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.signrpc.KeyDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getSingleTweak_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDoubleTweak_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getWitnessScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.signrpc.TxOut.serializeBinaryToWriter
    );
  }
  f = message.getSighash();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getInputIndex();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional KeyDescriptor key_desc = 1;
 * @return {?proto.signrpc.KeyDescriptor}
 */
proto.signrpc.SignDescriptor.prototype.getKeyDesc = function() {
  return /** @type{?proto.signrpc.KeyDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.signrpc.KeyDescriptor, 1));
};


/**
 * @param {?proto.signrpc.KeyDescriptor|undefined} value
 * @return {!proto.signrpc.SignDescriptor} returns this
*/
proto.signrpc.SignDescriptor.prototype.setKeyDesc = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.signrpc.SignDescriptor} returns this
 */
proto.signrpc.SignDescriptor.prototype.clearKeyDesc = function() {
  return this.setKeyDesc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.signrpc.SignDescriptor.prototype.hasKeyDesc = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes single_tweak = 2;
 * @return {!(string|Uint8Array)}
 */
proto.signrpc.SignDescriptor.prototype.getSingleTweak = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes single_tweak = 2;
 * This is a type-conversion wrapper around `getSingleTweak()`
 * @return {string}
 */
proto.signrpc.SignDescriptor.prototype.getSingleTweak_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSingleTweak()));
};


/**
 * optional bytes single_tweak = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSingleTweak()`
 * @return {!Uint8Array}
 */
proto.signrpc.SignDescriptor.prototype.getSingleTweak_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSingleTweak()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.signrpc.SignDescriptor} returns this
 */
proto.signrpc.SignDescriptor.prototype.setSingleTweak = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes double_tweak = 3;
 * @return {!(string|Uint8Array)}
 */
proto.signrpc.SignDescriptor.prototype.getDoubleTweak = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes double_tweak = 3;
 * This is a type-conversion wrapper around `getDoubleTweak()`
 * @return {string}
 */
proto.signrpc.SignDescriptor.prototype.getDoubleTweak_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDoubleTweak()));
};


/**
 * optional bytes double_tweak = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDoubleTweak()`
 * @return {!Uint8Array}
 */
proto.signrpc.SignDescriptor.prototype.getDoubleTweak_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDoubleTweak()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.signrpc.SignDescriptor} returns this
 */
proto.signrpc.SignDescriptor.prototype.setDoubleTweak = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes witness_script = 4;
 * @return {!(string|Uint8Array)}
 */
proto.signrpc.SignDescriptor.prototype.getWitnessScript = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes witness_script = 4;
 * This is a type-conversion wrapper around `getWitnessScript()`
 * @return {string}
 */
proto.signrpc.SignDescriptor.prototype.getWitnessScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWitnessScript()));
};


/**
 * optional bytes witness_script = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWitnessScript()`
 * @return {!Uint8Array}
 */
proto.signrpc.SignDescriptor.prototype.getWitnessScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWitnessScript()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.signrpc.SignDescriptor} returns this
 */
proto.signrpc.SignDescriptor.prototype.setWitnessScript = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional TxOut output = 5;
 * @return {?proto.signrpc.TxOut}
 */
proto.signrpc.SignDescriptor.prototype.getOutput = function() {
  return /** @type{?proto.signrpc.TxOut} */ (
    jspb.Message.getWrapperField(this, proto.signrpc.TxOut, 5));
};


/**
 * @param {?proto.signrpc.TxOut|undefined} value
 * @return {!proto.signrpc.SignDescriptor} returns this
*/
proto.signrpc.SignDescriptor.prototype.setOutput = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.signrpc.SignDescriptor} returns this
 */
proto.signrpc.SignDescriptor.prototype.clearOutput = function() {
  return this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.signrpc.SignDescriptor.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 sighash = 7;
 * @return {number}
 */
proto.signrpc.SignDescriptor.prototype.getSighash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.signrpc.SignDescriptor} returns this
 */
proto.signrpc.SignDescriptor.prototype.setSighash = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 input_index = 8;
 * @return {number}
 */
proto.signrpc.SignDescriptor.prototype.getInputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.signrpc.SignDescriptor} returns this
 */
proto.signrpc.SignDescriptor.prototype.setInputIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.signrpc.SignReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signrpc.SignReq.prototype.toObject = function(opt_includeInstance) {
  return proto.signrpc.SignReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signrpc.SignReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.SignReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    rawTxBytes: msg.getRawTxBytes_asB64(),
    signDescsList: jspb.Message.toObjectList(msg.getSignDescsList(),
    proto.signrpc.SignDescriptor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signrpc.SignReq}
 */
proto.signrpc.SignReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signrpc.SignReq;
  return proto.signrpc.SignReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signrpc.SignReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signrpc.SignReq}
 */
proto.signrpc.SignReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawTxBytes(value);
      break;
    case 2:
      var value = new proto.signrpc.SignDescriptor;
      reader.readMessage(value,proto.signrpc.SignDescriptor.deserializeBinaryFromReader);
      msg.addSignDescs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signrpc.SignReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signrpc.SignReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signrpc.SignReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.SignReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRawTxBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignDescsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.signrpc.SignDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes raw_tx_bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.signrpc.SignReq.prototype.getRawTxBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes raw_tx_bytes = 1;
 * This is a type-conversion wrapper around `getRawTxBytes()`
 * @return {string}
 */
proto.signrpc.SignReq.prototype.getRawTxBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawTxBytes()));
};


/**
 * optional bytes raw_tx_bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawTxBytes()`
 * @return {!Uint8Array}
 */
proto.signrpc.SignReq.prototype.getRawTxBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawTxBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.signrpc.SignReq} returns this
 */
proto.signrpc.SignReq.prototype.setRawTxBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated SignDescriptor sign_descs = 2;
 * @return {!Array<!proto.signrpc.SignDescriptor>}
 */
proto.signrpc.SignReq.prototype.getSignDescsList = function() {
  return /** @type{!Array<!proto.signrpc.SignDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.signrpc.SignDescriptor, 2));
};


/**
 * @param {!Array<!proto.signrpc.SignDescriptor>} value
 * @return {!proto.signrpc.SignReq} returns this
*/
proto.signrpc.SignReq.prototype.setSignDescsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.signrpc.SignDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.signrpc.SignDescriptor}
 */
proto.signrpc.SignReq.prototype.addSignDescs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.signrpc.SignDescriptor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.signrpc.SignReq} returns this
 */
proto.signrpc.SignReq.prototype.clearSignDescsList = function() {
  return this.setSignDescsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.signrpc.SignResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signrpc.SignResp.prototype.toObject = function(opt_includeInstance) {
  return proto.signrpc.SignResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signrpc.SignResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.SignResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    rawSigsList: msg.getRawSigsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signrpc.SignResp}
 */
proto.signrpc.SignResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signrpc.SignResp;
  return proto.signrpc.SignResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signrpc.SignResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signrpc.SignResp}
 */
proto.signrpc.SignResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addRawSigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signrpc.SignResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signrpc.SignResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signrpc.SignResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.SignResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRawSigsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes raw_sigs = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.signrpc.SignResp.prototype.getRawSigsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes raw_sigs = 1;
 * This is a type-conversion wrapper around `getRawSigsList()`
 * @return {!Array<string>}
 */
proto.signrpc.SignResp.prototype.getRawSigsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getRawSigsList()));
};


/**
 * repeated bytes raw_sigs = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawSigsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.signrpc.SignResp.prototype.getRawSigsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getRawSigsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.signrpc.SignResp} returns this
 */
proto.signrpc.SignResp.prototype.setRawSigsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.signrpc.SignResp} returns this
 */
proto.signrpc.SignResp.prototype.addRawSigs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.signrpc.SignResp} returns this
 */
proto.signrpc.SignResp.prototype.clearRawSigsList = function() {
  return this.setRawSigsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.signrpc.InputScript.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signrpc.InputScript.prototype.toObject = function(opt_includeInstance) {
  return proto.signrpc.InputScript.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signrpc.InputScript} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.InputScript.toObject = function(includeInstance, msg) {
  var f, obj = {
    witnessList: msg.getWitnessList_asB64(),
    sigScript: msg.getSigScript_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signrpc.InputScript}
 */
proto.signrpc.InputScript.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signrpc.InputScript;
  return proto.signrpc.InputScript.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signrpc.InputScript} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signrpc.InputScript}
 */
proto.signrpc.InputScript.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addWitness(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signrpc.InputScript.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signrpc.InputScript.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signrpc.InputScript} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.InputScript.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWitnessList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getSigScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * repeated bytes witness = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.signrpc.InputScript.prototype.getWitnessList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes witness = 1;
 * This is a type-conversion wrapper around `getWitnessList()`
 * @return {!Array<string>}
 */
proto.signrpc.InputScript.prototype.getWitnessList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getWitnessList()));
};


/**
 * repeated bytes witness = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWitnessList()`
 * @return {!Array<!Uint8Array>}
 */
proto.signrpc.InputScript.prototype.getWitnessList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getWitnessList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.signrpc.InputScript} returns this
 */
proto.signrpc.InputScript.prototype.setWitnessList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.signrpc.InputScript} returns this
 */
proto.signrpc.InputScript.prototype.addWitness = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.signrpc.InputScript} returns this
 */
proto.signrpc.InputScript.prototype.clearWitnessList = function() {
  return this.setWitnessList([]);
};


/**
 * optional bytes sig_script = 2;
 * @return {!(string|Uint8Array)}
 */
proto.signrpc.InputScript.prototype.getSigScript = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sig_script = 2;
 * This is a type-conversion wrapper around `getSigScript()`
 * @return {string}
 */
proto.signrpc.InputScript.prototype.getSigScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigScript()));
};


/**
 * optional bytes sig_script = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigScript()`
 * @return {!Uint8Array}
 */
proto.signrpc.InputScript.prototype.getSigScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigScript()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.signrpc.InputScript} returns this
 */
proto.signrpc.InputScript.prototype.setSigScript = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.signrpc.InputScriptResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signrpc.InputScriptResp.prototype.toObject = function(opt_includeInstance) {
  return proto.signrpc.InputScriptResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signrpc.InputScriptResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.InputScriptResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputScriptsList: jspb.Message.toObjectList(msg.getInputScriptsList(),
    proto.signrpc.InputScript.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signrpc.InputScriptResp}
 */
proto.signrpc.InputScriptResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signrpc.InputScriptResp;
  return proto.signrpc.InputScriptResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signrpc.InputScriptResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signrpc.InputScriptResp}
 */
proto.signrpc.InputScriptResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.signrpc.InputScript;
      reader.readMessage(value,proto.signrpc.InputScript.deserializeBinaryFromReader);
      msg.addInputScripts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signrpc.InputScriptResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signrpc.InputScriptResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signrpc.InputScriptResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.InputScriptResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputScriptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.signrpc.InputScript.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InputScript input_scripts = 1;
 * @return {!Array<!proto.signrpc.InputScript>}
 */
proto.signrpc.InputScriptResp.prototype.getInputScriptsList = function() {
  return /** @type{!Array<!proto.signrpc.InputScript>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.signrpc.InputScript, 1));
};


/**
 * @param {!Array<!proto.signrpc.InputScript>} value
 * @return {!proto.signrpc.InputScriptResp} returns this
*/
proto.signrpc.InputScriptResp.prototype.setInputScriptsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.signrpc.InputScript=} opt_value
 * @param {number=} opt_index
 * @return {!proto.signrpc.InputScript}
 */
proto.signrpc.InputScriptResp.prototype.addInputScripts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.signrpc.InputScript, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.signrpc.InputScriptResp} returns this
 */
proto.signrpc.InputScriptResp.prototype.clearInputScriptsList = function() {
  return this.setInputScriptsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signrpc.SignMessageReq.prototype.toObject = function(opt_includeInstance) {
  return proto.signrpc.SignMessageReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signrpc.SignMessageReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.SignMessageReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: msg.getMsg_asB64(),
    keyLoc: (f = msg.getKeyLoc()) && proto.signrpc.KeyLocator.toObject(includeInstance, f),
    doubleHash: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    compactSig: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signrpc.SignMessageReq}
 */
proto.signrpc.SignMessageReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signrpc.SignMessageReq;
  return proto.signrpc.SignMessageReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signrpc.SignMessageReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signrpc.SignMessageReq}
 */
proto.signrpc.SignMessageReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsg(value);
      break;
    case 2:
      var value = new proto.signrpc.KeyLocator;
      reader.readMessage(value,proto.signrpc.KeyLocator.deserializeBinaryFromReader);
      msg.setKeyLoc(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoubleHash(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCompactSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signrpc.SignMessageReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signrpc.SignMessageReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signrpc.SignMessageReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.SignMessageReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKeyLoc();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.signrpc.KeyLocator.serializeBinaryToWriter
    );
  }
  f = message.getDoubleHash();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getCompactSig();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bytes msg = 1;
 * @return {!(string|Uint8Array)}
 */
proto.signrpc.SignMessageReq.prototype.getMsg = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes msg = 1;
 * This is a type-conversion wrapper around `getMsg()`
 * @return {string}
 */
proto.signrpc.SignMessageReq.prototype.getMsg_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsg()));
};


/**
 * optional bytes msg = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsg()`
 * @return {!Uint8Array}
 */
proto.signrpc.SignMessageReq.prototype.getMsg_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsg()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.signrpc.SignMessageReq} returns this
 */
proto.signrpc.SignMessageReq.prototype.setMsg = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional KeyLocator key_loc = 2;
 * @return {?proto.signrpc.KeyLocator}
 */
proto.signrpc.SignMessageReq.prototype.getKeyLoc = function() {
  return /** @type{?proto.signrpc.KeyLocator} */ (
    jspb.Message.getWrapperField(this, proto.signrpc.KeyLocator, 2));
};


/**
 * @param {?proto.signrpc.KeyLocator|undefined} value
 * @return {!proto.signrpc.SignMessageReq} returns this
*/
proto.signrpc.SignMessageReq.prototype.setKeyLoc = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.signrpc.SignMessageReq} returns this
 */
proto.signrpc.SignMessageReq.prototype.clearKeyLoc = function() {
  return this.setKeyLoc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.signrpc.SignMessageReq.prototype.hasKeyLoc = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool double_hash = 3;
 * @return {boolean}
 */
proto.signrpc.SignMessageReq.prototype.getDoubleHash = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.signrpc.SignMessageReq} returns this
 */
proto.signrpc.SignMessageReq.prototype.setDoubleHash = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool compact_sig = 4;
 * @return {boolean}
 */
proto.signrpc.SignMessageReq.prototype.getCompactSig = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.signrpc.SignMessageReq} returns this
 */
proto.signrpc.SignMessageReq.prototype.setCompactSig = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signrpc.SignMessageResp.prototype.toObject = function(opt_includeInstance) {
  return proto.signrpc.SignMessageResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signrpc.SignMessageResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.SignMessageResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signrpc.SignMessageResp}
 */
proto.signrpc.SignMessageResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signrpc.SignMessageResp;
  return proto.signrpc.SignMessageResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signrpc.SignMessageResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signrpc.SignMessageResp}
 */
proto.signrpc.SignMessageResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signrpc.SignMessageResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signrpc.SignMessageResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signrpc.SignMessageResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.SignMessageResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes signature = 1;
 * @return {!(string|Uint8Array)}
 */
proto.signrpc.SignMessageResp.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes signature = 1;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.signrpc.SignMessageResp.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.signrpc.SignMessageResp.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.signrpc.SignMessageResp} returns this
 */
proto.signrpc.SignMessageResp.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signrpc.VerifyMessageReq.prototype.toObject = function(opt_includeInstance) {
  return proto.signrpc.VerifyMessageReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signrpc.VerifyMessageReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.VerifyMessageReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: msg.getMsg_asB64(),
    signature: msg.getSignature_asB64(),
    pubkey: msg.getPubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signrpc.VerifyMessageReq}
 */
proto.signrpc.VerifyMessageReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signrpc.VerifyMessageReq;
  return proto.signrpc.VerifyMessageReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signrpc.VerifyMessageReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signrpc.VerifyMessageReq}
 */
proto.signrpc.VerifyMessageReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsg(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signrpc.VerifyMessageReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signrpc.VerifyMessageReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signrpc.VerifyMessageReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.VerifyMessageReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes msg = 1;
 * @return {!(string|Uint8Array)}
 */
proto.signrpc.VerifyMessageReq.prototype.getMsg = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes msg = 1;
 * This is a type-conversion wrapper around `getMsg()`
 * @return {string}
 */
proto.signrpc.VerifyMessageReq.prototype.getMsg_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsg()));
};


/**
 * optional bytes msg = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsg()`
 * @return {!Uint8Array}
 */
proto.signrpc.VerifyMessageReq.prototype.getMsg_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsg()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.signrpc.VerifyMessageReq} returns this
 */
proto.signrpc.VerifyMessageReq.prototype.setMsg = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.signrpc.VerifyMessageReq.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.signrpc.VerifyMessageReq.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.signrpc.VerifyMessageReq.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.signrpc.VerifyMessageReq} returns this
 */
proto.signrpc.VerifyMessageReq.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes pubkey = 3;
 * @return {!(string|Uint8Array)}
 */
proto.signrpc.VerifyMessageReq.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes pubkey = 3;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.signrpc.VerifyMessageReq.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.signrpc.VerifyMessageReq.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.signrpc.VerifyMessageReq} returns this
 */
proto.signrpc.VerifyMessageReq.prototype.setPubkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signrpc.VerifyMessageResp.prototype.toObject = function(opt_includeInstance) {
  return proto.signrpc.VerifyMessageResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signrpc.VerifyMessageResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.VerifyMessageResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    valid: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signrpc.VerifyMessageResp}
 */
proto.signrpc.VerifyMessageResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signrpc.VerifyMessageResp;
  return proto.signrpc.VerifyMessageResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signrpc.VerifyMessageResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signrpc.VerifyMessageResp}
 */
proto.signrpc.VerifyMessageResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signrpc.VerifyMessageResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signrpc.VerifyMessageResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signrpc.VerifyMessageResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.VerifyMessageResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValid();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool valid = 1;
 * @return {boolean}
 */
proto.signrpc.VerifyMessageResp.prototype.getValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.signrpc.VerifyMessageResp} returns this
 */
proto.signrpc.VerifyMessageResp.prototype.setValid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signrpc.SharedKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.signrpc.SharedKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signrpc.SharedKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.SharedKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ephemeralPubkey: msg.getEphemeralPubkey_asB64(),
    keyLoc: (f = msg.getKeyLoc()) && proto.signrpc.KeyLocator.toObject(includeInstance, f),
    keyDesc: (f = msg.getKeyDesc()) && proto.signrpc.KeyDescriptor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signrpc.SharedKeyRequest}
 */
proto.signrpc.SharedKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signrpc.SharedKeyRequest;
  return proto.signrpc.SharedKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signrpc.SharedKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signrpc.SharedKeyRequest}
 */
proto.signrpc.SharedKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEphemeralPubkey(value);
      break;
    case 2:
      var value = new proto.signrpc.KeyLocator;
      reader.readMessage(value,proto.signrpc.KeyLocator.deserializeBinaryFromReader);
      msg.setKeyLoc(value);
      break;
    case 3:
      var value = new proto.signrpc.KeyDescriptor;
      reader.readMessage(value,proto.signrpc.KeyDescriptor.deserializeBinaryFromReader);
      msg.setKeyDesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signrpc.SharedKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signrpc.SharedKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signrpc.SharedKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.SharedKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEphemeralPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKeyLoc();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.signrpc.KeyLocator.serializeBinaryToWriter
    );
  }
  f = message.getKeyDesc();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.signrpc.KeyDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes ephemeral_pubkey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.signrpc.SharedKeyRequest.prototype.getEphemeralPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ephemeral_pubkey = 1;
 * This is a type-conversion wrapper around `getEphemeralPubkey()`
 * @return {string}
 */
proto.signrpc.SharedKeyRequest.prototype.getEphemeralPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEphemeralPubkey()));
};


/**
 * optional bytes ephemeral_pubkey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEphemeralPubkey()`
 * @return {!Uint8Array}
 */
proto.signrpc.SharedKeyRequest.prototype.getEphemeralPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEphemeralPubkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.signrpc.SharedKeyRequest} returns this
 */
proto.signrpc.SharedKeyRequest.prototype.setEphemeralPubkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional KeyLocator key_loc = 2;
 * @return {?proto.signrpc.KeyLocator}
 */
proto.signrpc.SharedKeyRequest.prototype.getKeyLoc = function() {
  return /** @type{?proto.signrpc.KeyLocator} */ (
    jspb.Message.getWrapperField(this, proto.signrpc.KeyLocator, 2));
};


/**
 * @param {?proto.signrpc.KeyLocator|undefined} value
 * @return {!proto.signrpc.SharedKeyRequest} returns this
*/
proto.signrpc.SharedKeyRequest.prototype.setKeyLoc = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.signrpc.SharedKeyRequest} returns this
 */
proto.signrpc.SharedKeyRequest.prototype.clearKeyLoc = function() {
  return this.setKeyLoc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.signrpc.SharedKeyRequest.prototype.hasKeyLoc = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional KeyDescriptor key_desc = 3;
 * @return {?proto.signrpc.KeyDescriptor}
 */
proto.signrpc.SharedKeyRequest.prototype.getKeyDesc = function() {
  return /** @type{?proto.signrpc.KeyDescriptor} */ (
    jspb.Message.getWrapperField(this, proto.signrpc.KeyDescriptor, 3));
};


/**
 * @param {?proto.signrpc.KeyDescriptor|undefined} value
 * @return {!proto.signrpc.SharedKeyRequest} returns this
*/
proto.signrpc.SharedKeyRequest.prototype.setKeyDesc = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.signrpc.SharedKeyRequest} returns this
 */
proto.signrpc.SharedKeyRequest.prototype.clearKeyDesc = function() {
  return this.setKeyDesc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.signrpc.SharedKeyRequest.prototype.hasKeyDesc = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.signrpc.SharedKeyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.signrpc.SharedKeyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.signrpc.SharedKeyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.SharedKeyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sharedKey: msg.getSharedKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.signrpc.SharedKeyResponse}
 */
proto.signrpc.SharedKeyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.signrpc.SharedKeyResponse;
  return proto.signrpc.SharedKeyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.signrpc.SharedKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.signrpc.SharedKeyResponse}
 */
proto.signrpc.SharedKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSharedKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.signrpc.SharedKeyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.signrpc.SharedKeyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.signrpc.SharedKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.signrpc.SharedKeyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSharedKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes shared_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.signrpc.SharedKeyResponse.prototype.getSharedKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes shared_key = 1;
 * This is a type-conversion wrapper around `getSharedKey()`
 * @return {string}
 */
proto.signrpc.SharedKeyResponse.prototype.getSharedKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSharedKey()));
};


/**
 * optional bytes shared_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSharedKey()`
 * @return {!Uint8Array}
 */
proto.signrpc.SharedKeyResponse.prototype.getSharedKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSharedKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.signrpc.SharedKeyResponse} returns this
 */
proto.signrpc.SharedKeyResponse.prototype.setSharedKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


goog.object.extend(exports, proto.signrpc);
