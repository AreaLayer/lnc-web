// source: chainrpc/chainnotifier.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.chainrpc.BlockEpoch', null, global);
goog.exportSymbol('proto.chainrpc.ConfDetails', null, global);
goog.exportSymbol('proto.chainrpc.ConfEvent', null, global);
goog.exportSymbol('proto.chainrpc.ConfEvent.EventCase', null, global);
goog.exportSymbol('proto.chainrpc.ConfRequest', null, global);
goog.exportSymbol('proto.chainrpc.Outpoint', null, global);
goog.exportSymbol('proto.chainrpc.Reorg', null, global);
goog.exportSymbol('proto.chainrpc.SpendDetails', null, global);
goog.exportSymbol('proto.chainrpc.SpendEvent', null, global);
goog.exportSymbol('proto.chainrpc.SpendEvent.EventCase', null, global);
goog.exportSymbol('proto.chainrpc.SpendRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chainrpc.ConfRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chainrpc.ConfRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chainrpc.ConfRequest.displayName = 'proto.chainrpc.ConfRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chainrpc.ConfDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chainrpc.ConfDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chainrpc.ConfDetails.displayName = 'proto.chainrpc.ConfDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chainrpc.Reorg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chainrpc.Reorg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chainrpc.Reorg.displayName = 'proto.chainrpc.Reorg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chainrpc.ConfEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.chainrpc.ConfEvent.oneofGroups_);
};
goog.inherits(proto.chainrpc.ConfEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chainrpc.ConfEvent.displayName = 'proto.chainrpc.ConfEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chainrpc.Outpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chainrpc.Outpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chainrpc.Outpoint.displayName = 'proto.chainrpc.Outpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chainrpc.SpendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chainrpc.SpendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chainrpc.SpendRequest.displayName = 'proto.chainrpc.SpendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chainrpc.SpendDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chainrpc.SpendDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chainrpc.SpendDetails.displayName = 'proto.chainrpc.SpendDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chainrpc.SpendEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.chainrpc.SpendEvent.oneofGroups_);
};
goog.inherits(proto.chainrpc.SpendEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chainrpc.SpendEvent.displayName = 'proto.chainrpc.SpendEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chainrpc.BlockEpoch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chainrpc.BlockEpoch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chainrpc.BlockEpoch.displayName = 'proto.chainrpc.BlockEpoch';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chainrpc.ConfRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chainrpc.ConfRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chainrpc.ConfRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chainrpc.ConfRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    txid: msg.getTxid_asB64(),
    script: msg.getScript_asB64(),
    numConfs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    heightHint: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chainrpc.ConfRequest}
 */
proto.chainrpc.ConfRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chainrpc.ConfRequest;
  return proto.chainrpc.ConfRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chainrpc.ConfRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chainrpc.ConfRequest}
 */
proto.chainrpc.ConfRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScript(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumConfs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeightHint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chainrpc.ConfRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chainrpc.ConfRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chainrpc.ConfRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chainrpc.ConfRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getNumConfs();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getHeightHint();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional bytes txid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.chainrpc.ConfRequest.prototype.getTxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes txid = 1;
 * This is a type-conversion wrapper around `getTxid()`
 * @return {string}
 */
proto.chainrpc.ConfRequest.prototype.getTxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxid()));
};


/**
 * optional bytes txid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxid()`
 * @return {!Uint8Array}
 */
proto.chainrpc.ConfRequest.prototype.getTxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.chainrpc.ConfRequest} returns this
 */
proto.chainrpc.ConfRequest.prototype.setTxid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes script = 2;
 * @return {!(string|Uint8Array)}
 */
proto.chainrpc.ConfRequest.prototype.getScript = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes script = 2;
 * This is a type-conversion wrapper around `getScript()`
 * @return {string}
 */
proto.chainrpc.ConfRequest.prototype.getScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScript()));
};


/**
 * optional bytes script = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScript()`
 * @return {!Uint8Array}
 */
proto.chainrpc.ConfRequest.prototype.getScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScript()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.chainrpc.ConfRequest} returns this
 */
proto.chainrpc.ConfRequest.prototype.setScript = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 num_confs = 3;
 * @return {number}
 */
proto.chainrpc.ConfRequest.prototype.getNumConfs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.chainrpc.ConfRequest} returns this
 */
proto.chainrpc.ConfRequest.prototype.setNumConfs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 height_hint = 4;
 * @return {number}
 */
proto.chainrpc.ConfRequest.prototype.getHeightHint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.chainrpc.ConfRequest} returns this
 */
proto.chainrpc.ConfRequest.prototype.setHeightHint = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chainrpc.ConfDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.chainrpc.ConfDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chainrpc.ConfDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chainrpc.ConfDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    rawTx: msg.getRawTx_asB64(),
    blockHash: msg.getBlockHash_asB64(),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 3, 0),
    txIndex: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chainrpc.ConfDetails}
 */
proto.chainrpc.ConfDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chainrpc.ConfDetails;
  return proto.chainrpc.ConfDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chainrpc.ConfDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chainrpc.ConfDetails}
 */
proto.chainrpc.ConfDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawTx(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlockHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chainrpc.ConfDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chainrpc.ConfDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chainrpc.ConfDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chainrpc.ConfDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRawTx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getTxIndex();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional bytes raw_tx = 1;
 * @return {!(string|Uint8Array)}
 */
proto.chainrpc.ConfDetails.prototype.getRawTx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes raw_tx = 1;
 * This is a type-conversion wrapper around `getRawTx()`
 * @return {string}
 */
proto.chainrpc.ConfDetails.prototype.getRawTx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawTx()));
};


/**
 * optional bytes raw_tx = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawTx()`
 * @return {!Uint8Array}
 */
proto.chainrpc.ConfDetails.prototype.getRawTx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawTx()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.chainrpc.ConfDetails} returns this
 */
proto.chainrpc.ConfDetails.prototype.setRawTx = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes block_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.chainrpc.ConfDetails.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes block_hash = 2;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.chainrpc.ConfDetails.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.chainrpc.ConfDetails.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.chainrpc.ConfDetails} returns this
 */
proto.chainrpc.ConfDetails.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 block_height = 3;
 * @return {number}
 */
proto.chainrpc.ConfDetails.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.chainrpc.ConfDetails} returns this
 */
proto.chainrpc.ConfDetails.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 tx_index = 4;
 * @return {number}
 */
proto.chainrpc.ConfDetails.prototype.getTxIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.chainrpc.ConfDetails} returns this
 */
proto.chainrpc.ConfDetails.prototype.setTxIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chainrpc.Reorg.prototype.toObject = function(opt_includeInstance) {
  return proto.chainrpc.Reorg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chainrpc.Reorg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chainrpc.Reorg.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chainrpc.Reorg}
 */
proto.chainrpc.Reorg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chainrpc.Reorg;
  return proto.chainrpc.Reorg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chainrpc.Reorg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chainrpc.Reorg}
 */
proto.chainrpc.Reorg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chainrpc.Reorg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chainrpc.Reorg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chainrpc.Reorg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chainrpc.Reorg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.chainrpc.ConfEvent.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.chainrpc.ConfEvent.EventCase = {
  EVENT_NOT_SET: 0,
  CONF: 1,
  REORG: 2
};

/**
 * @return {proto.chainrpc.ConfEvent.EventCase}
 */
proto.chainrpc.ConfEvent.prototype.getEventCase = function() {
  return /** @type {proto.chainrpc.ConfEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.chainrpc.ConfEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chainrpc.ConfEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.chainrpc.ConfEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chainrpc.ConfEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chainrpc.ConfEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    conf: (f = msg.getConf()) && proto.chainrpc.ConfDetails.toObject(includeInstance, f),
    reorg: (f = msg.getReorg()) && proto.chainrpc.Reorg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chainrpc.ConfEvent}
 */
proto.chainrpc.ConfEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chainrpc.ConfEvent;
  return proto.chainrpc.ConfEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chainrpc.ConfEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chainrpc.ConfEvent}
 */
proto.chainrpc.ConfEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.chainrpc.ConfDetails;
      reader.readMessage(value,proto.chainrpc.ConfDetails.deserializeBinaryFromReader);
      msg.setConf(value);
      break;
    case 2:
      var value = new proto.chainrpc.Reorg;
      reader.readMessage(value,proto.chainrpc.Reorg.deserializeBinaryFromReader);
      msg.setReorg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chainrpc.ConfEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chainrpc.ConfEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chainrpc.ConfEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chainrpc.ConfEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConf();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.chainrpc.ConfDetails.serializeBinaryToWriter
    );
  }
  f = message.getReorg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.chainrpc.Reorg.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConfDetails conf = 1;
 * @return {?proto.chainrpc.ConfDetails}
 */
proto.chainrpc.ConfEvent.prototype.getConf = function() {
  return /** @type{?proto.chainrpc.ConfDetails} */ (
    jspb.Message.getWrapperField(this, proto.chainrpc.ConfDetails, 1));
};


/**
 * @param {?proto.chainrpc.ConfDetails|undefined} value
 * @return {!proto.chainrpc.ConfEvent} returns this
*/
proto.chainrpc.ConfEvent.prototype.setConf = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.chainrpc.ConfEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chainrpc.ConfEvent} returns this
 */
proto.chainrpc.ConfEvent.prototype.clearConf = function() {
  return this.setConf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chainrpc.ConfEvent.prototype.hasConf = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Reorg reorg = 2;
 * @return {?proto.chainrpc.Reorg}
 */
proto.chainrpc.ConfEvent.prototype.getReorg = function() {
  return /** @type{?proto.chainrpc.Reorg} */ (
    jspb.Message.getWrapperField(this, proto.chainrpc.Reorg, 2));
};


/**
 * @param {?proto.chainrpc.Reorg|undefined} value
 * @return {!proto.chainrpc.ConfEvent} returns this
*/
proto.chainrpc.ConfEvent.prototype.setReorg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.chainrpc.ConfEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chainrpc.ConfEvent} returns this
 */
proto.chainrpc.ConfEvent.prototype.clearReorg = function() {
  return this.setReorg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chainrpc.ConfEvent.prototype.hasReorg = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chainrpc.Outpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.chainrpc.Outpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chainrpc.Outpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chainrpc.Outpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chainrpc.Outpoint}
 */
proto.chainrpc.Outpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chainrpc.Outpoint;
  return proto.chainrpc.Outpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chainrpc.Outpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chainrpc.Outpoint}
 */
proto.chainrpc.Outpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chainrpc.Outpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chainrpc.Outpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chainrpc.Outpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chainrpc.Outpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.chainrpc.Outpoint.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.chainrpc.Outpoint.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.chainrpc.Outpoint.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.chainrpc.Outpoint} returns this
 */
proto.chainrpc.Outpoint.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 index = 2;
 * @return {number}
 */
proto.chainrpc.Outpoint.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.chainrpc.Outpoint} returns this
 */
proto.chainrpc.Outpoint.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chainrpc.SpendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chainrpc.SpendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chainrpc.SpendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chainrpc.SpendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    outpoint: (f = msg.getOutpoint()) && proto.chainrpc.Outpoint.toObject(includeInstance, f),
    script: msg.getScript_asB64(),
    heightHint: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chainrpc.SpendRequest}
 */
proto.chainrpc.SpendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chainrpc.SpendRequest;
  return proto.chainrpc.SpendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chainrpc.SpendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chainrpc.SpendRequest}
 */
proto.chainrpc.SpendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.chainrpc.Outpoint;
      reader.readMessage(value,proto.chainrpc.Outpoint.deserializeBinaryFromReader);
      msg.setOutpoint(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScript(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeightHint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chainrpc.SpendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chainrpc.SpendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chainrpc.SpendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chainrpc.SpendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutpoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.chainrpc.Outpoint.serializeBinaryToWriter
    );
  }
  f = message.getScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getHeightHint();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional Outpoint outpoint = 1;
 * @return {?proto.chainrpc.Outpoint}
 */
proto.chainrpc.SpendRequest.prototype.getOutpoint = function() {
  return /** @type{?proto.chainrpc.Outpoint} */ (
    jspb.Message.getWrapperField(this, proto.chainrpc.Outpoint, 1));
};


/**
 * @param {?proto.chainrpc.Outpoint|undefined} value
 * @return {!proto.chainrpc.SpendRequest} returns this
*/
proto.chainrpc.SpendRequest.prototype.setOutpoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chainrpc.SpendRequest} returns this
 */
proto.chainrpc.SpendRequest.prototype.clearOutpoint = function() {
  return this.setOutpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chainrpc.SpendRequest.prototype.hasOutpoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes script = 2;
 * @return {!(string|Uint8Array)}
 */
proto.chainrpc.SpendRequest.prototype.getScript = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes script = 2;
 * This is a type-conversion wrapper around `getScript()`
 * @return {string}
 */
proto.chainrpc.SpendRequest.prototype.getScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScript()));
};


/**
 * optional bytes script = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScript()`
 * @return {!Uint8Array}
 */
proto.chainrpc.SpendRequest.prototype.getScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScript()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.chainrpc.SpendRequest} returns this
 */
proto.chainrpc.SpendRequest.prototype.setScript = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 height_hint = 3;
 * @return {number}
 */
proto.chainrpc.SpendRequest.prototype.getHeightHint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.chainrpc.SpendRequest} returns this
 */
proto.chainrpc.SpendRequest.prototype.setHeightHint = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chainrpc.SpendDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.chainrpc.SpendDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chainrpc.SpendDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chainrpc.SpendDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    spendingOutpoint: (f = msg.getSpendingOutpoint()) && proto.chainrpc.Outpoint.toObject(includeInstance, f),
    rawSpendingTx: msg.getRawSpendingTx_asB64(),
    spendingTxHash: msg.getSpendingTxHash_asB64(),
    spendingInputIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    spendingHeight: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chainrpc.SpendDetails}
 */
proto.chainrpc.SpendDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chainrpc.SpendDetails;
  return proto.chainrpc.SpendDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chainrpc.SpendDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chainrpc.SpendDetails}
 */
proto.chainrpc.SpendDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.chainrpc.Outpoint;
      reader.readMessage(value,proto.chainrpc.Outpoint.deserializeBinaryFromReader);
      msg.setSpendingOutpoint(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawSpendingTx(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSpendingTxHash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpendingInputIndex(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpendingHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chainrpc.SpendDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chainrpc.SpendDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chainrpc.SpendDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chainrpc.SpendDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpendingOutpoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.chainrpc.Outpoint.serializeBinaryToWriter
    );
  }
  f = message.getRawSpendingTx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSpendingTxHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSpendingInputIndex();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSpendingHeight();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional Outpoint spending_outpoint = 1;
 * @return {?proto.chainrpc.Outpoint}
 */
proto.chainrpc.SpendDetails.prototype.getSpendingOutpoint = function() {
  return /** @type{?proto.chainrpc.Outpoint} */ (
    jspb.Message.getWrapperField(this, proto.chainrpc.Outpoint, 1));
};


/**
 * @param {?proto.chainrpc.Outpoint|undefined} value
 * @return {!proto.chainrpc.SpendDetails} returns this
*/
proto.chainrpc.SpendDetails.prototype.setSpendingOutpoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chainrpc.SpendDetails} returns this
 */
proto.chainrpc.SpendDetails.prototype.clearSpendingOutpoint = function() {
  return this.setSpendingOutpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chainrpc.SpendDetails.prototype.hasSpendingOutpoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes raw_spending_tx = 2;
 * @return {!(string|Uint8Array)}
 */
proto.chainrpc.SpendDetails.prototype.getRawSpendingTx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes raw_spending_tx = 2;
 * This is a type-conversion wrapper around `getRawSpendingTx()`
 * @return {string}
 */
proto.chainrpc.SpendDetails.prototype.getRawSpendingTx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawSpendingTx()));
};


/**
 * optional bytes raw_spending_tx = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawSpendingTx()`
 * @return {!Uint8Array}
 */
proto.chainrpc.SpendDetails.prototype.getRawSpendingTx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawSpendingTx()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.chainrpc.SpendDetails} returns this
 */
proto.chainrpc.SpendDetails.prototype.setRawSpendingTx = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes spending_tx_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.chainrpc.SpendDetails.prototype.getSpendingTxHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes spending_tx_hash = 3;
 * This is a type-conversion wrapper around `getSpendingTxHash()`
 * @return {string}
 */
proto.chainrpc.SpendDetails.prototype.getSpendingTxHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSpendingTxHash()));
};


/**
 * optional bytes spending_tx_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpendingTxHash()`
 * @return {!Uint8Array}
 */
proto.chainrpc.SpendDetails.prototype.getSpendingTxHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSpendingTxHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.chainrpc.SpendDetails} returns this
 */
proto.chainrpc.SpendDetails.prototype.setSpendingTxHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint32 spending_input_index = 4;
 * @return {number}
 */
proto.chainrpc.SpendDetails.prototype.getSpendingInputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.chainrpc.SpendDetails} returns this
 */
proto.chainrpc.SpendDetails.prototype.setSpendingInputIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 spending_height = 5;
 * @return {number}
 */
proto.chainrpc.SpendDetails.prototype.getSpendingHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.chainrpc.SpendDetails} returns this
 */
proto.chainrpc.SpendDetails.prototype.setSpendingHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.chainrpc.SpendEvent.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.chainrpc.SpendEvent.EventCase = {
  EVENT_NOT_SET: 0,
  SPEND: 1,
  REORG: 2
};

/**
 * @return {proto.chainrpc.SpendEvent.EventCase}
 */
proto.chainrpc.SpendEvent.prototype.getEventCase = function() {
  return /** @type {proto.chainrpc.SpendEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.chainrpc.SpendEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chainrpc.SpendEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.chainrpc.SpendEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chainrpc.SpendEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chainrpc.SpendEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    spend: (f = msg.getSpend()) && proto.chainrpc.SpendDetails.toObject(includeInstance, f),
    reorg: (f = msg.getReorg()) && proto.chainrpc.Reorg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chainrpc.SpendEvent}
 */
proto.chainrpc.SpendEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chainrpc.SpendEvent;
  return proto.chainrpc.SpendEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chainrpc.SpendEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chainrpc.SpendEvent}
 */
proto.chainrpc.SpendEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.chainrpc.SpendDetails;
      reader.readMessage(value,proto.chainrpc.SpendDetails.deserializeBinaryFromReader);
      msg.setSpend(value);
      break;
    case 2:
      var value = new proto.chainrpc.Reorg;
      reader.readMessage(value,proto.chainrpc.Reorg.deserializeBinaryFromReader);
      msg.setReorg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chainrpc.SpendEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chainrpc.SpendEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chainrpc.SpendEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chainrpc.SpendEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpend();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.chainrpc.SpendDetails.serializeBinaryToWriter
    );
  }
  f = message.getReorg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.chainrpc.Reorg.serializeBinaryToWriter
    );
  }
};


/**
 * optional SpendDetails spend = 1;
 * @return {?proto.chainrpc.SpendDetails}
 */
proto.chainrpc.SpendEvent.prototype.getSpend = function() {
  return /** @type{?proto.chainrpc.SpendDetails} */ (
    jspb.Message.getWrapperField(this, proto.chainrpc.SpendDetails, 1));
};


/**
 * @param {?proto.chainrpc.SpendDetails|undefined} value
 * @return {!proto.chainrpc.SpendEvent} returns this
*/
proto.chainrpc.SpendEvent.prototype.setSpend = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.chainrpc.SpendEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chainrpc.SpendEvent} returns this
 */
proto.chainrpc.SpendEvent.prototype.clearSpend = function() {
  return this.setSpend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chainrpc.SpendEvent.prototype.hasSpend = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Reorg reorg = 2;
 * @return {?proto.chainrpc.Reorg}
 */
proto.chainrpc.SpendEvent.prototype.getReorg = function() {
  return /** @type{?proto.chainrpc.Reorg} */ (
    jspb.Message.getWrapperField(this, proto.chainrpc.Reorg, 2));
};


/**
 * @param {?proto.chainrpc.Reorg|undefined} value
 * @return {!proto.chainrpc.SpendEvent} returns this
*/
proto.chainrpc.SpendEvent.prototype.setReorg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.chainrpc.SpendEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chainrpc.SpendEvent} returns this
 */
proto.chainrpc.SpendEvent.prototype.clearReorg = function() {
  return this.setReorg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chainrpc.SpendEvent.prototype.hasReorg = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chainrpc.BlockEpoch.prototype.toObject = function(opt_includeInstance) {
  return proto.chainrpc.BlockEpoch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chainrpc.BlockEpoch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chainrpc.BlockEpoch.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chainrpc.BlockEpoch}
 */
proto.chainrpc.BlockEpoch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chainrpc.BlockEpoch;
  return proto.chainrpc.BlockEpoch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chainrpc.BlockEpoch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chainrpc.BlockEpoch}
 */
proto.chainrpc.BlockEpoch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chainrpc.BlockEpoch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chainrpc.BlockEpoch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chainrpc.BlockEpoch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chainrpc.BlockEpoch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.chainrpc.BlockEpoch.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.chainrpc.BlockEpoch.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.chainrpc.BlockEpoch.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.chainrpc.BlockEpoch} returns this
 */
proto.chainrpc.BlockEpoch.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 height = 2;
 * @return {number}
 */
proto.chainrpc.BlockEpoch.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.chainrpc.BlockEpoch} returns this
 */
proto.chainrpc.BlockEpoch.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.chainrpc);
