// source: faraday.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.frdrpc.BitcoinPrice', null, global);
goog.exportSymbol('proto.frdrpc.ChannelInsight', null, global);
goog.exportSymbol('proto.frdrpc.ChannelInsightsRequest', null, global);
goog.exportSymbol('proto.frdrpc.ChannelInsightsResponse', null, global);
goog.exportSymbol('proto.frdrpc.CloseRecommendationRequest', null, global);
goog.exportSymbol('proto.frdrpc.CloseRecommendationRequest.Metric', null, global);
goog.exportSymbol('proto.frdrpc.CloseRecommendationsResponse', null, global);
goog.exportSymbol('proto.frdrpc.CloseReportRequest', null, global);
goog.exportSymbol('proto.frdrpc.CloseReportResponse', null, global);
goog.exportSymbol('proto.frdrpc.CustomCategory', null, global);
goog.exportSymbol('proto.frdrpc.EntryType', null, global);
goog.exportSymbol('proto.frdrpc.ExchangeRate', null, global);
goog.exportSymbol('proto.frdrpc.ExchangeRateRequest', null, global);
goog.exportSymbol('proto.frdrpc.ExchangeRateResponse', null, global);
goog.exportSymbol('proto.frdrpc.FiatBackend', null, global);
goog.exportSymbol('proto.frdrpc.Granularity', null, global);
goog.exportSymbol('proto.frdrpc.NodeAuditRequest', null, global);
goog.exportSymbol('proto.frdrpc.NodeAuditResponse', null, global);
goog.exportSymbol('proto.frdrpc.OutlierRecommendationsRequest', null, global);
goog.exportSymbol('proto.frdrpc.PairReport', null, global);
goog.exportSymbol('proto.frdrpc.Recommendation', null, global);
goog.exportSymbol('proto.frdrpc.ReportEntry', null, global);
goog.exportSymbol('proto.frdrpc.RevenueReport', null, global);
goog.exportSymbol('proto.frdrpc.RevenueReportRequest', null, global);
goog.exportSymbol('proto.frdrpc.RevenueReportResponse', null, global);
goog.exportSymbol('proto.frdrpc.ThresholdRecommendationsRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.CloseRecommendationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frdrpc.CloseRecommendationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.CloseRecommendationRequest.displayName = 'proto.frdrpc.CloseRecommendationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.OutlierRecommendationsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frdrpc.OutlierRecommendationsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.OutlierRecommendationsRequest.displayName = 'proto.frdrpc.OutlierRecommendationsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.ThresholdRecommendationsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frdrpc.ThresholdRecommendationsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.ThresholdRecommendationsRequest.displayName = 'proto.frdrpc.ThresholdRecommendationsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.CloseRecommendationsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.frdrpc.CloseRecommendationsResponse.repeatedFields_, null);
};
goog.inherits(proto.frdrpc.CloseRecommendationsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.CloseRecommendationsResponse.displayName = 'proto.frdrpc.CloseRecommendationsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.Recommendation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frdrpc.Recommendation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.Recommendation.displayName = 'proto.frdrpc.Recommendation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.RevenueReportRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.frdrpc.RevenueReportRequest.repeatedFields_, null);
};
goog.inherits(proto.frdrpc.RevenueReportRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.RevenueReportRequest.displayName = 'proto.frdrpc.RevenueReportRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.RevenueReportResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.frdrpc.RevenueReportResponse.repeatedFields_, null);
};
goog.inherits(proto.frdrpc.RevenueReportResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.RevenueReportResponse.displayName = 'proto.frdrpc.RevenueReportResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.RevenueReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frdrpc.RevenueReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.RevenueReport.displayName = 'proto.frdrpc.RevenueReport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.PairReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frdrpc.PairReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.PairReport.displayName = 'proto.frdrpc.PairReport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.ChannelInsightsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frdrpc.ChannelInsightsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.ChannelInsightsRequest.displayName = 'proto.frdrpc.ChannelInsightsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.ChannelInsightsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.frdrpc.ChannelInsightsResponse.repeatedFields_, null);
};
goog.inherits(proto.frdrpc.ChannelInsightsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.ChannelInsightsResponse.displayName = 'proto.frdrpc.ChannelInsightsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.ChannelInsight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frdrpc.ChannelInsight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.ChannelInsight.displayName = 'proto.frdrpc.ChannelInsight';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.ExchangeRateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.frdrpc.ExchangeRateRequest.repeatedFields_, null);
};
goog.inherits(proto.frdrpc.ExchangeRateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.ExchangeRateRequest.displayName = 'proto.frdrpc.ExchangeRateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.ExchangeRateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.frdrpc.ExchangeRateResponse.repeatedFields_, null);
};
goog.inherits(proto.frdrpc.ExchangeRateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.ExchangeRateResponse.displayName = 'proto.frdrpc.ExchangeRateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.BitcoinPrice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frdrpc.BitcoinPrice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.BitcoinPrice.displayName = 'proto.frdrpc.BitcoinPrice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.ExchangeRate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frdrpc.ExchangeRate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.ExchangeRate.displayName = 'proto.frdrpc.ExchangeRate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.NodeAuditRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.frdrpc.NodeAuditRequest.repeatedFields_, null);
};
goog.inherits(proto.frdrpc.NodeAuditRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.NodeAuditRequest.displayName = 'proto.frdrpc.NodeAuditRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.CustomCategory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.frdrpc.CustomCategory.repeatedFields_, null);
};
goog.inherits(proto.frdrpc.CustomCategory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.CustomCategory.displayName = 'proto.frdrpc.CustomCategory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.ReportEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frdrpc.ReportEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.ReportEntry.displayName = 'proto.frdrpc.ReportEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.NodeAuditResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.frdrpc.NodeAuditResponse.repeatedFields_, null);
};
goog.inherits(proto.frdrpc.NodeAuditResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.NodeAuditResponse.displayName = 'proto.frdrpc.NodeAuditResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.CloseReportRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frdrpc.CloseReportRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.CloseReportRequest.displayName = 'proto.frdrpc.CloseReportRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frdrpc.CloseReportResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frdrpc.CloseReportResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frdrpc.CloseReportResponse.displayName = 'proto.frdrpc.CloseReportResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.CloseRecommendationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.CloseRecommendationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.CloseRecommendationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.CloseRecommendationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    minimumMonitored: jspb.Message.getFieldWithDefault(msg, 1, 0),
    metric: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.CloseRecommendationRequest}
 */
proto.frdrpc.CloseRecommendationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.CloseRecommendationRequest;
  return proto.frdrpc.CloseRecommendationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.CloseRecommendationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.CloseRecommendationRequest}
 */
proto.frdrpc.CloseRecommendationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinimumMonitored(value);
      break;
    case 2:
      var value = /** @type {!proto.frdrpc.CloseRecommendationRequest.Metric} */ (reader.readEnum());
      msg.setMetric(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.CloseRecommendationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.CloseRecommendationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.CloseRecommendationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.CloseRecommendationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinimumMonitored();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMetric();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.frdrpc.CloseRecommendationRequest.Metric = {
  UNKNOWN: 0,
  UPTIME: 1,
  REVENUE: 2,
  INCOMING_VOLUME: 3,
  OUTGOING_VOLUME: 4,
  TOTAL_VOLUME: 5
};

/**
 * optional int64 minimum_monitored = 1;
 * @return {number}
 */
proto.frdrpc.CloseRecommendationRequest.prototype.getMinimumMonitored = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.CloseRecommendationRequest} returns this
 */
proto.frdrpc.CloseRecommendationRequest.prototype.setMinimumMonitored = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Metric metric = 2;
 * @return {!proto.frdrpc.CloseRecommendationRequest.Metric}
 */
proto.frdrpc.CloseRecommendationRequest.prototype.getMetric = function() {
  return /** @type {!proto.frdrpc.CloseRecommendationRequest.Metric} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.frdrpc.CloseRecommendationRequest.Metric} value
 * @return {!proto.frdrpc.CloseRecommendationRequest} returns this
 */
proto.frdrpc.CloseRecommendationRequest.prototype.setMetric = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.OutlierRecommendationsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.OutlierRecommendationsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.OutlierRecommendationsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.OutlierRecommendationsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    recRequest: (f = msg.getRecRequest()) && proto.frdrpc.CloseRecommendationRequest.toObject(includeInstance, f),
    outlierMultiplier: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.OutlierRecommendationsRequest}
 */
proto.frdrpc.OutlierRecommendationsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.OutlierRecommendationsRequest;
  return proto.frdrpc.OutlierRecommendationsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.OutlierRecommendationsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.OutlierRecommendationsRequest}
 */
proto.frdrpc.OutlierRecommendationsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.frdrpc.CloseRecommendationRequest;
      reader.readMessage(value,proto.frdrpc.CloseRecommendationRequest.deserializeBinaryFromReader);
      msg.setRecRequest(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOutlierMultiplier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.OutlierRecommendationsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.OutlierRecommendationsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.OutlierRecommendationsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.OutlierRecommendationsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.frdrpc.CloseRecommendationRequest.serializeBinaryToWriter
    );
  }
  f = message.getOutlierMultiplier();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional CloseRecommendationRequest rec_request = 1;
 * @return {?proto.frdrpc.CloseRecommendationRequest}
 */
proto.frdrpc.OutlierRecommendationsRequest.prototype.getRecRequest = function() {
  return /** @type{?proto.frdrpc.CloseRecommendationRequest} */ (
    jspb.Message.getWrapperField(this, proto.frdrpc.CloseRecommendationRequest, 1));
};


/**
 * @param {?proto.frdrpc.CloseRecommendationRequest|undefined} value
 * @return {!proto.frdrpc.OutlierRecommendationsRequest} returns this
*/
proto.frdrpc.OutlierRecommendationsRequest.prototype.setRecRequest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.frdrpc.OutlierRecommendationsRequest} returns this
 */
proto.frdrpc.OutlierRecommendationsRequest.prototype.clearRecRequest = function() {
  return this.setRecRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.frdrpc.OutlierRecommendationsRequest.prototype.hasRecRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float outlier_multiplier = 2;
 * @return {number}
 */
proto.frdrpc.OutlierRecommendationsRequest.prototype.getOutlierMultiplier = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.OutlierRecommendationsRequest} returns this
 */
proto.frdrpc.OutlierRecommendationsRequest.prototype.setOutlierMultiplier = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.ThresholdRecommendationsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.ThresholdRecommendationsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.ThresholdRecommendationsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.ThresholdRecommendationsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    recRequest: (f = msg.getRecRequest()) && proto.frdrpc.CloseRecommendationRequest.toObject(includeInstance, f),
    thresholdValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.ThresholdRecommendationsRequest}
 */
proto.frdrpc.ThresholdRecommendationsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.ThresholdRecommendationsRequest;
  return proto.frdrpc.ThresholdRecommendationsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.ThresholdRecommendationsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.ThresholdRecommendationsRequest}
 */
proto.frdrpc.ThresholdRecommendationsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.frdrpc.CloseRecommendationRequest;
      reader.readMessage(value,proto.frdrpc.CloseRecommendationRequest.deserializeBinaryFromReader);
      msg.setRecRequest(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThresholdValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.ThresholdRecommendationsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.ThresholdRecommendationsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.ThresholdRecommendationsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.ThresholdRecommendationsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.frdrpc.CloseRecommendationRequest.serializeBinaryToWriter
    );
  }
  f = message.getThresholdValue();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional CloseRecommendationRequest rec_request = 1;
 * @return {?proto.frdrpc.CloseRecommendationRequest}
 */
proto.frdrpc.ThresholdRecommendationsRequest.prototype.getRecRequest = function() {
  return /** @type{?proto.frdrpc.CloseRecommendationRequest} */ (
    jspb.Message.getWrapperField(this, proto.frdrpc.CloseRecommendationRequest, 1));
};


/**
 * @param {?proto.frdrpc.CloseRecommendationRequest|undefined} value
 * @return {!proto.frdrpc.ThresholdRecommendationsRequest} returns this
*/
proto.frdrpc.ThresholdRecommendationsRequest.prototype.setRecRequest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.frdrpc.ThresholdRecommendationsRequest} returns this
 */
proto.frdrpc.ThresholdRecommendationsRequest.prototype.clearRecRequest = function() {
  return this.setRecRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.frdrpc.ThresholdRecommendationsRequest.prototype.hasRecRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float threshold_value = 2;
 * @return {number}
 */
proto.frdrpc.ThresholdRecommendationsRequest.prototype.getThresholdValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.ThresholdRecommendationsRequest} returns this
 */
proto.frdrpc.ThresholdRecommendationsRequest.prototype.setThresholdValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.frdrpc.CloseRecommendationsResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.CloseRecommendationsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.CloseRecommendationsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.CloseRecommendationsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.CloseRecommendationsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalChannels: jspb.Message.getFieldWithDefault(msg, 1, 0),
    consideredChannels: jspb.Message.getFieldWithDefault(msg, 2, 0),
    recommendationsList: jspb.Message.toObjectList(msg.getRecommendationsList(),
    proto.frdrpc.Recommendation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.CloseRecommendationsResponse}
 */
proto.frdrpc.CloseRecommendationsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.CloseRecommendationsResponse;
  return proto.frdrpc.CloseRecommendationsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.CloseRecommendationsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.CloseRecommendationsResponse}
 */
proto.frdrpc.CloseRecommendationsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalChannels(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConsideredChannels(value);
      break;
    case 3:
      var value = new proto.frdrpc.Recommendation;
      reader.readMessage(value,proto.frdrpc.Recommendation.deserializeBinaryFromReader);
      msg.addRecommendations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.CloseRecommendationsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.CloseRecommendationsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.CloseRecommendationsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.CloseRecommendationsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalChannels();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getConsideredChannels();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRecommendationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.frdrpc.Recommendation.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 total_channels = 1;
 * @return {number}
 */
proto.frdrpc.CloseRecommendationsResponse.prototype.getTotalChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.CloseRecommendationsResponse} returns this
 */
proto.frdrpc.CloseRecommendationsResponse.prototype.setTotalChannels = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 considered_channels = 2;
 * @return {number}
 */
proto.frdrpc.CloseRecommendationsResponse.prototype.getConsideredChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.CloseRecommendationsResponse} returns this
 */
proto.frdrpc.CloseRecommendationsResponse.prototype.setConsideredChannels = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Recommendation recommendations = 3;
 * @return {!Array<!proto.frdrpc.Recommendation>}
 */
proto.frdrpc.CloseRecommendationsResponse.prototype.getRecommendationsList = function() {
  return /** @type{!Array<!proto.frdrpc.Recommendation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.frdrpc.Recommendation, 3));
};


/**
 * @param {!Array<!proto.frdrpc.Recommendation>} value
 * @return {!proto.frdrpc.CloseRecommendationsResponse} returns this
*/
proto.frdrpc.CloseRecommendationsResponse.prototype.setRecommendationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.frdrpc.Recommendation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.frdrpc.Recommendation}
 */
proto.frdrpc.CloseRecommendationsResponse.prototype.addRecommendations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.frdrpc.Recommendation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.frdrpc.CloseRecommendationsResponse} returns this
 */
proto.frdrpc.CloseRecommendationsResponse.prototype.clearRecommendationsList = function() {
  return this.setRecommendationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.Recommendation.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.Recommendation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.Recommendation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.Recommendation.toObject = function(includeInstance, msg) {
  var f, obj = {
    chanPoint: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    recommendClose: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.Recommendation}
 */
proto.frdrpc.Recommendation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.Recommendation;
  return proto.frdrpc.Recommendation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.Recommendation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.Recommendation}
 */
proto.frdrpc.Recommendation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChanPoint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRecommendClose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.Recommendation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.Recommendation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.Recommendation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.Recommendation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChanPoint();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getRecommendClose();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string chan_point = 1;
 * @return {string}
 */
proto.frdrpc.Recommendation.prototype.getChanPoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.frdrpc.Recommendation} returns this
 */
proto.frdrpc.Recommendation.prototype.setChanPoint = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float value = 2;
 * @return {number}
 */
proto.frdrpc.Recommendation.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.Recommendation} returns this
 */
proto.frdrpc.Recommendation.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional bool recommend_close = 3;
 * @return {boolean}
 */
proto.frdrpc.Recommendation.prototype.getRecommendClose = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.frdrpc.Recommendation} returns this
 */
proto.frdrpc.Recommendation.prototype.setRecommendClose = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.frdrpc.RevenueReportRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.RevenueReportRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.RevenueReportRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.RevenueReportRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.RevenueReportRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chanPointsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    startTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.RevenueReportRequest}
 */
proto.frdrpc.RevenueReportRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.RevenueReportRequest;
  return proto.frdrpc.RevenueReportRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.RevenueReportRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.RevenueReportRequest}
 */
proto.frdrpc.RevenueReportRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addChanPoints(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.RevenueReportRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.RevenueReportRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.RevenueReportRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.RevenueReportRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChanPointsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * repeated string chan_points = 1;
 * @return {!Array<string>}
 */
proto.frdrpc.RevenueReportRequest.prototype.getChanPointsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.frdrpc.RevenueReportRequest} returns this
 */
proto.frdrpc.RevenueReportRequest.prototype.setChanPointsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.frdrpc.RevenueReportRequest} returns this
 */
proto.frdrpc.RevenueReportRequest.prototype.addChanPoints = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.frdrpc.RevenueReportRequest} returns this
 */
proto.frdrpc.RevenueReportRequest.prototype.clearChanPointsList = function() {
  return this.setChanPointsList([]);
};


/**
 * optional uint64 start_time = 2;
 * @return {number}
 */
proto.frdrpc.RevenueReportRequest.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.RevenueReportRequest} returns this
 */
proto.frdrpc.RevenueReportRequest.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 end_time = 3;
 * @return {number}
 */
proto.frdrpc.RevenueReportRequest.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.RevenueReportRequest} returns this
 */
proto.frdrpc.RevenueReportRequest.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.frdrpc.RevenueReportResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.RevenueReportResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.RevenueReportResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.RevenueReportResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.RevenueReportResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportsList: jspb.Message.toObjectList(msg.getReportsList(),
    proto.frdrpc.RevenueReport.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.RevenueReportResponse}
 */
proto.frdrpc.RevenueReportResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.RevenueReportResponse;
  return proto.frdrpc.RevenueReportResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.RevenueReportResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.RevenueReportResponse}
 */
proto.frdrpc.RevenueReportResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.frdrpc.RevenueReport;
      reader.readMessage(value,proto.frdrpc.RevenueReport.deserializeBinaryFromReader);
      msg.addReports(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.RevenueReportResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.RevenueReportResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.RevenueReportResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.RevenueReportResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.frdrpc.RevenueReport.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RevenueReport reports = 1;
 * @return {!Array<!proto.frdrpc.RevenueReport>}
 */
proto.frdrpc.RevenueReportResponse.prototype.getReportsList = function() {
  return /** @type{!Array<!proto.frdrpc.RevenueReport>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.frdrpc.RevenueReport, 1));
};


/**
 * @param {!Array<!proto.frdrpc.RevenueReport>} value
 * @return {!proto.frdrpc.RevenueReportResponse} returns this
*/
proto.frdrpc.RevenueReportResponse.prototype.setReportsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.frdrpc.RevenueReport=} opt_value
 * @param {number=} opt_index
 * @return {!proto.frdrpc.RevenueReport}
 */
proto.frdrpc.RevenueReportResponse.prototype.addReports = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.frdrpc.RevenueReport, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.frdrpc.RevenueReportResponse} returns this
 */
proto.frdrpc.RevenueReportResponse.prototype.clearReportsList = function() {
  return this.setReportsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.RevenueReport.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.RevenueReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.RevenueReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.RevenueReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetChannel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pairReportsMap: (f = msg.getPairReportsMap()) ? f.toObject(includeInstance, proto.frdrpc.PairReport.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.RevenueReport}
 */
proto.frdrpc.RevenueReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.RevenueReport;
  return proto.frdrpc.RevenueReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.RevenueReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.RevenueReport}
 */
proto.frdrpc.RevenueReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetChannel(value);
      break;
    case 2:
      var value = msg.getPairReportsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.frdrpc.PairReport.deserializeBinaryFromReader, "", new proto.frdrpc.PairReport());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.RevenueReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.RevenueReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.RevenueReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.RevenueReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetChannel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPairReportsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.frdrpc.PairReport.serializeBinaryToWriter);
  }
};


/**
 * optional string target_channel = 1;
 * @return {string}
 */
proto.frdrpc.RevenueReport.prototype.getTargetChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.frdrpc.RevenueReport} returns this
 */
proto.frdrpc.RevenueReport.prototype.setTargetChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, PairReport> pair_reports = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.frdrpc.PairReport>}
 */
proto.frdrpc.RevenueReport.prototype.getPairReportsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.frdrpc.PairReport>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.frdrpc.PairReport));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.frdrpc.RevenueReport} returns this
 */
proto.frdrpc.RevenueReport.prototype.clearPairReportsMap = function() {
  this.getPairReportsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.PairReport.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.PairReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.PairReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.PairReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    amountOutgoingMsat: jspb.Message.getFieldWithDefault(msg, 1, 0),
    feesOutgoingMsat: jspb.Message.getFieldWithDefault(msg, 2, 0),
    amountIncomingMsat: jspb.Message.getFieldWithDefault(msg, 3, 0),
    feesIncomingMsat: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.PairReport}
 */
proto.frdrpc.PairReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.PairReport;
  return proto.frdrpc.PairReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.PairReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.PairReport}
 */
proto.frdrpc.PairReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmountOutgoingMsat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFeesOutgoingMsat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmountIncomingMsat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFeesIncomingMsat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.PairReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.PairReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.PairReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.PairReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmountOutgoingMsat();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getFeesOutgoingMsat();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getAmountIncomingMsat();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getFeesIncomingMsat();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int64 amount_outgoing_msat = 1;
 * @return {number}
 */
proto.frdrpc.PairReport.prototype.getAmountOutgoingMsat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.PairReport} returns this
 */
proto.frdrpc.PairReport.prototype.setAmountOutgoingMsat = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 fees_outgoing_msat = 2;
 * @return {number}
 */
proto.frdrpc.PairReport.prototype.getFeesOutgoingMsat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.PairReport} returns this
 */
proto.frdrpc.PairReport.prototype.setFeesOutgoingMsat = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 amount_incoming_msat = 3;
 * @return {number}
 */
proto.frdrpc.PairReport.prototype.getAmountIncomingMsat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.PairReport} returns this
 */
proto.frdrpc.PairReport.prototype.setAmountIncomingMsat = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 fees_incoming_msat = 4;
 * @return {number}
 */
proto.frdrpc.PairReport.prototype.getFeesIncomingMsat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.PairReport} returns this
 */
proto.frdrpc.PairReport.prototype.setFeesIncomingMsat = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.ChannelInsightsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.ChannelInsightsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.ChannelInsightsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.ChannelInsightsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.ChannelInsightsRequest}
 */
proto.frdrpc.ChannelInsightsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.ChannelInsightsRequest;
  return proto.frdrpc.ChannelInsightsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.ChannelInsightsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.ChannelInsightsRequest}
 */
proto.frdrpc.ChannelInsightsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.ChannelInsightsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.ChannelInsightsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.ChannelInsightsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.ChannelInsightsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.frdrpc.ChannelInsightsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.ChannelInsightsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.ChannelInsightsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.ChannelInsightsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.ChannelInsightsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelInsightsList: jspb.Message.toObjectList(msg.getChannelInsightsList(),
    proto.frdrpc.ChannelInsight.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.ChannelInsightsResponse}
 */
proto.frdrpc.ChannelInsightsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.ChannelInsightsResponse;
  return proto.frdrpc.ChannelInsightsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.ChannelInsightsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.ChannelInsightsResponse}
 */
proto.frdrpc.ChannelInsightsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.frdrpc.ChannelInsight;
      reader.readMessage(value,proto.frdrpc.ChannelInsight.deserializeBinaryFromReader);
      msg.addChannelInsights(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.ChannelInsightsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.ChannelInsightsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.ChannelInsightsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.ChannelInsightsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelInsightsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.frdrpc.ChannelInsight.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChannelInsight channel_insights = 1;
 * @return {!Array<!proto.frdrpc.ChannelInsight>}
 */
proto.frdrpc.ChannelInsightsResponse.prototype.getChannelInsightsList = function() {
  return /** @type{!Array<!proto.frdrpc.ChannelInsight>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.frdrpc.ChannelInsight, 1));
};


/**
 * @param {!Array<!proto.frdrpc.ChannelInsight>} value
 * @return {!proto.frdrpc.ChannelInsightsResponse} returns this
*/
proto.frdrpc.ChannelInsightsResponse.prototype.setChannelInsightsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.frdrpc.ChannelInsight=} opt_value
 * @param {number=} opt_index
 * @return {!proto.frdrpc.ChannelInsight}
 */
proto.frdrpc.ChannelInsightsResponse.prototype.addChannelInsights = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.frdrpc.ChannelInsight, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.frdrpc.ChannelInsightsResponse} returns this
 */
proto.frdrpc.ChannelInsightsResponse.prototype.clearChannelInsightsList = function() {
  return this.setChannelInsightsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.ChannelInsight.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.ChannelInsight.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.ChannelInsight} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.ChannelInsight.toObject = function(includeInstance, msg) {
  var f, obj = {
    chanPoint: jspb.Message.getFieldWithDefault(msg, 1, ""),
    monitoredSeconds: jspb.Message.getFieldWithDefault(msg, 2, 0),
    uptimeSeconds: jspb.Message.getFieldWithDefault(msg, 3, 0),
    volumeIncomingMsat: jspb.Message.getFieldWithDefault(msg, 4, 0),
    volumeOutgoingMsat: jspb.Message.getFieldWithDefault(msg, 5, 0),
    feesEarnedMsat: jspb.Message.getFieldWithDefault(msg, 6, 0),
    confirmations: jspb.Message.getFieldWithDefault(msg, 7, 0),
    pb_private: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.ChannelInsight}
 */
proto.frdrpc.ChannelInsight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.ChannelInsight;
  return proto.frdrpc.ChannelInsight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.ChannelInsight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.ChannelInsight}
 */
proto.frdrpc.ChannelInsight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChanPoint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMonitoredSeconds(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUptimeSeconds(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVolumeIncomingMsat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVolumeOutgoingMsat(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFeesEarnedMsat(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConfirmations(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPrivate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.ChannelInsight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.ChannelInsight.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.ChannelInsight} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.ChannelInsight.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChanPoint();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMonitoredSeconds();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUptimeSeconds();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getVolumeIncomingMsat();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getVolumeOutgoingMsat();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getFeesEarnedMsat();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getConfirmations();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getPrivate();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional string chan_point = 1;
 * @return {string}
 */
proto.frdrpc.ChannelInsight.prototype.getChanPoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.frdrpc.ChannelInsight} returns this
 */
proto.frdrpc.ChannelInsight.prototype.setChanPoint = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 monitored_seconds = 2;
 * @return {number}
 */
proto.frdrpc.ChannelInsight.prototype.getMonitoredSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.ChannelInsight} returns this
 */
proto.frdrpc.ChannelInsight.prototype.setMonitoredSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 uptime_seconds = 3;
 * @return {number}
 */
proto.frdrpc.ChannelInsight.prototype.getUptimeSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.ChannelInsight} returns this
 */
proto.frdrpc.ChannelInsight.prototype.setUptimeSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 volume_incoming_msat = 4;
 * @return {number}
 */
proto.frdrpc.ChannelInsight.prototype.getVolumeIncomingMsat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.ChannelInsight} returns this
 */
proto.frdrpc.ChannelInsight.prototype.setVolumeIncomingMsat = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 volume_outgoing_msat = 5;
 * @return {number}
 */
proto.frdrpc.ChannelInsight.prototype.getVolumeOutgoingMsat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.ChannelInsight} returns this
 */
proto.frdrpc.ChannelInsight.prototype.setVolumeOutgoingMsat = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 fees_earned_msat = 6;
 * @return {number}
 */
proto.frdrpc.ChannelInsight.prototype.getFeesEarnedMsat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.ChannelInsight} returns this
 */
proto.frdrpc.ChannelInsight.prototype.setFeesEarnedMsat = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 confirmations = 7;
 * @return {number}
 */
proto.frdrpc.ChannelInsight.prototype.getConfirmations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.ChannelInsight} returns this
 */
proto.frdrpc.ChannelInsight.prototype.setConfirmations = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool private = 8;
 * @return {boolean}
 */
proto.frdrpc.ChannelInsight.prototype.getPrivate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.frdrpc.ChannelInsight} returns this
 */
proto.frdrpc.ChannelInsight.prototype.setPrivate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.frdrpc.ExchangeRateRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.ExchangeRateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.ExchangeRateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.ExchangeRateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.ExchangeRateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    granularity: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fiatBackend: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.ExchangeRateRequest}
 */
proto.frdrpc.ExchangeRateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.ExchangeRateRequest;
  return proto.frdrpc.ExchangeRateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.ExchangeRateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.ExchangeRateRequest}
 */
proto.frdrpc.ExchangeRateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTimestamps(values[i]);
      }
      break;
    case 4:
      var value = /** @type {!proto.frdrpc.Granularity} */ (reader.readEnum());
      msg.setGranularity(value);
      break;
    case 5:
      var value = /** @type {!proto.frdrpc.FiatBackend} */ (reader.readEnum());
      msg.setFiatBackend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.ExchangeRateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.ExchangeRateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.ExchangeRateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.ExchangeRateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestampsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      3,
      f
    );
  }
  f = message.getGranularity();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getFiatBackend();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * repeated uint64 timestamps = 3;
 * @return {!Array<number>}
 */
proto.frdrpc.ExchangeRateRequest.prototype.getTimestampsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.frdrpc.ExchangeRateRequest} returns this
 */
proto.frdrpc.ExchangeRateRequest.prototype.setTimestampsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.frdrpc.ExchangeRateRequest} returns this
 */
proto.frdrpc.ExchangeRateRequest.prototype.addTimestamps = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.frdrpc.ExchangeRateRequest} returns this
 */
proto.frdrpc.ExchangeRateRequest.prototype.clearTimestampsList = function() {
  return this.setTimestampsList([]);
};


/**
 * optional Granularity granularity = 4;
 * @return {!proto.frdrpc.Granularity}
 */
proto.frdrpc.ExchangeRateRequest.prototype.getGranularity = function() {
  return /** @type {!proto.frdrpc.Granularity} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.frdrpc.Granularity} value
 * @return {!proto.frdrpc.ExchangeRateRequest} returns this
 */
proto.frdrpc.ExchangeRateRequest.prototype.setGranularity = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional FiatBackend fiat_backend = 5;
 * @return {!proto.frdrpc.FiatBackend}
 */
proto.frdrpc.ExchangeRateRequest.prototype.getFiatBackend = function() {
  return /** @type {!proto.frdrpc.FiatBackend} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.frdrpc.FiatBackend} value
 * @return {!proto.frdrpc.ExchangeRateRequest} returns this
 */
proto.frdrpc.ExchangeRateRequest.prototype.setFiatBackend = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.frdrpc.ExchangeRateResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.ExchangeRateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.ExchangeRateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.ExchangeRateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.ExchangeRateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ratesList: jspb.Message.toObjectList(msg.getRatesList(),
    proto.frdrpc.ExchangeRate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.ExchangeRateResponse}
 */
proto.frdrpc.ExchangeRateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.ExchangeRateResponse;
  return proto.frdrpc.ExchangeRateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.ExchangeRateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.ExchangeRateResponse}
 */
proto.frdrpc.ExchangeRateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.frdrpc.ExchangeRate;
      reader.readMessage(value,proto.frdrpc.ExchangeRate.deserializeBinaryFromReader);
      msg.addRates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.ExchangeRateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.ExchangeRateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.ExchangeRateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.ExchangeRateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.frdrpc.ExchangeRate.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ExchangeRate rates = 2;
 * @return {!Array<!proto.frdrpc.ExchangeRate>}
 */
proto.frdrpc.ExchangeRateResponse.prototype.getRatesList = function() {
  return /** @type{!Array<!proto.frdrpc.ExchangeRate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.frdrpc.ExchangeRate, 2));
};


/**
 * @param {!Array<!proto.frdrpc.ExchangeRate>} value
 * @return {!proto.frdrpc.ExchangeRateResponse} returns this
*/
proto.frdrpc.ExchangeRateResponse.prototype.setRatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.frdrpc.ExchangeRate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.frdrpc.ExchangeRate}
 */
proto.frdrpc.ExchangeRateResponse.prototype.addRates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.frdrpc.ExchangeRate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.frdrpc.ExchangeRateResponse} returns this
 */
proto.frdrpc.ExchangeRateResponse.prototype.clearRatesList = function() {
  return this.setRatesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.BitcoinPrice.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.BitcoinPrice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.BitcoinPrice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.BitcoinPrice.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: jspb.Message.getFieldWithDefault(msg, 1, ""),
    priceTimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.BitcoinPrice}
 */
proto.frdrpc.BitcoinPrice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.BitcoinPrice;
  return proto.frdrpc.BitcoinPrice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.BitcoinPrice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.BitcoinPrice}
 */
proto.frdrpc.BitcoinPrice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPriceTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.BitcoinPrice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.BitcoinPrice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.BitcoinPrice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.BitcoinPrice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPriceTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string price = 1;
 * @return {string}
 */
proto.frdrpc.BitcoinPrice.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.frdrpc.BitcoinPrice} returns this
 */
proto.frdrpc.BitcoinPrice.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 price_timestamp = 2;
 * @return {number}
 */
proto.frdrpc.BitcoinPrice.prototype.getPriceTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.BitcoinPrice} returns this
 */
proto.frdrpc.BitcoinPrice.prototype.setPriceTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.ExchangeRate.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.ExchangeRate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.ExchangeRate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.ExchangeRate.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    btcPrice: (f = msg.getBtcPrice()) && proto.frdrpc.BitcoinPrice.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.ExchangeRate}
 */
proto.frdrpc.ExchangeRate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.ExchangeRate;
  return proto.frdrpc.ExchangeRate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.ExchangeRate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.ExchangeRate}
 */
proto.frdrpc.ExchangeRate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new proto.frdrpc.BitcoinPrice;
      reader.readMessage(value,proto.frdrpc.BitcoinPrice.deserializeBinaryFromReader);
      msg.setBtcPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.ExchangeRate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.ExchangeRate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.ExchangeRate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.ExchangeRate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBtcPrice();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.frdrpc.BitcoinPrice.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 timestamp = 1;
 * @return {number}
 */
proto.frdrpc.ExchangeRate.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.ExchangeRate} returns this
 */
proto.frdrpc.ExchangeRate.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional BitcoinPrice btc_price = 2;
 * @return {?proto.frdrpc.BitcoinPrice}
 */
proto.frdrpc.ExchangeRate.prototype.getBtcPrice = function() {
  return /** @type{?proto.frdrpc.BitcoinPrice} */ (
    jspb.Message.getWrapperField(this, proto.frdrpc.BitcoinPrice, 2));
};


/**
 * @param {?proto.frdrpc.BitcoinPrice|undefined} value
 * @return {!proto.frdrpc.ExchangeRate} returns this
*/
proto.frdrpc.ExchangeRate.prototype.setBtcPrice = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.frdrpc.ExchangeRate} returns this
 */
proto.frdrpc.ExchangeRate.prototype.clearBtcPrice = function() {
  return this.setBtcPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.frdrpc.ExchangeRate.prototype.hasBtcPrice = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.frdrpc.NodeAuditRequest.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.NodeAuditRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.NodeAuditRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.NodeAuditRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.NodeAuditRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    disableFiat: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    granularity: jspb.Message.getFieldWithDefault(msg, 5, 0),
    customCategoriesList: jspb.Message.toObjectList(msg.getCustomCategoriesList(),
    proto.frdrpc.CustomCategory.toObject, includeInstance),
    fiatBackend: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.NodeAuditRequest}
 */
proto.frdrpc.NodeAuditRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.NodeAuditRequest;
  return proto.frdrpc.NodeAuditRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.NodeAuditRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.NodeAuditRequest}
 */
proto.frdrpc.NodeAuditRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndTime(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableFiat(value);
      break;
    case 5:
      var value = /** @type {!proto.frdrpc.Granularity} */ (reader.readEnum());
      msg.setGranularity(value);
      break;
    case 6:
      var value = new proto.frdrpc.CustomCategory;
      reader.readMessage(value,proto.frdrpc.CustomCategory.deserializeBinaryFromReader);
      msg.addCustomCategories(value);
      break;
    case 7:
      var value = /** @type {!proto.frdrpc.FiatBackend} */ (reader.readEnum());
      msg.setFiatBackend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.NodeAuditRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.NodeAuditRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.NodeAuditRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.NodeAuditRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getDisableFiat();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getGranularity();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getCustomCategoriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.frdrpc.CustomCategory.serializeBinaryToWriter
    );
  }
  f = message.getFiatBackend();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * optional uint64 start_time = 1;
 * @return {number}
 */
proto.frdrpc.NodeAuditRequest.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.NodeAuditRequest} returns this
 */
proto.frdrpc.NodeAuditRequest.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 end_time = 2;
 * @return {number}
 */
proto.frdrpc.NodeAuditRequest.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.NodeAuditRequest} returns this
 */
proto.frdrpc.NodeAuditRequest.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool disable_fiat = 4;
 * @return {boolean}
 */
proto.frdrpc.NodeAuditRequest.prototype.getDisableFiat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.frdrpc.NodeAuditRequest} returns this
 */
proto.frdrpc.NodeAuditRequest.prototype.setDisableFiat = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional Granularity granularity = 5;
 * @return {!proto.frdrpc.Granularity}
 */
proto.frdrpc.NodeAuditRequest.prototype.getGranularity = function() {
  return /** @type {!proto.frdrpc.Granularity} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.frdrpc.Granularity} value
 * @return {!proto.frdrpc.NodeAuditRequest} returns this
 */
proto.frdrpc.NodeAuditRequest.prototype.setGranularity = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * repeated CustomCategory custom_categories = 6;
 * @return {!Array<!proto.frdrpc.CustomCategory>}
 */
proto.frdrpc.NodeAuditRequest.prototype.getCustomCategoriesList = function() {
  return /** @type{!Array<!proto.frdrpc.CustomCategory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.frdrpc.CustomCategory, 6));
};


/**
 * @param {!Array<!proto.frdrpc.CustomCategory>} value
 * @return {!proto.frdrpc.NodeAuditRequest} returns this
*/
proto.frdrpc.NodeAuditRequest.prototype.setCustomCategoriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.frdrpc.CustomCategory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.frdrpc.CustomCategory}
 */
proto.frdrpc.NodeAuditRequest.prototype.addCustomCategories = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.frdrpc.CustomCategory, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.frdrpc.NodeAuditRequest} returns this
 */
proto.frdrpc.NodeAuditRequest.prototype.clearCustomCategoriesList = function() {
  return this.setCustomCategoriesList([]);
};


/**
 * optional FiatBackend fiat_backend = 7;
 * @return {!proto.frdrpc.FiatBackend}
 */
proto.frdrpc.NodeAuditRequest.prototype.getFiatBackend = function() {
  return /** @type {!proto.frdrpc.FiatBackend} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.frdrpc.FiatBackend} value
 * @return {!proto.frdrpc.NodeAuditRequest} returns this
 */
proto.frdrpc.NodeAuditRequest.prototype.setFiatBackend = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.frdrpc.CustomCategory.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.CustomCategory.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.CustomCategory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.CustomCategory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.CustomCategory.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    onChain: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    offChain: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    labelPatternsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.CustomCategory}
 */
proto.frdrpc.CustomCategory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.CustomCategory;
  return proto.frdrpc.CustomCategory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.CustomCategory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.CustomCategory}
 */
proto.frdrpc.CustomCategory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnChain(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOffChain(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addLabelPatterns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.CustomCategory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.CustomCategory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.CustomCategory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.CustomCategory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOnChain();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getOffChain();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getLabelPatternsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.frdrpc.CustomCategory.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.frdrpc.CustomCategory} returns this
 */
proto.frdrpc.CustomCategory.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool on_chain = 2;
 * @return {boolean}
 */
proto.frdrpc.CustomCategory.prototype.getOnChain = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.frdrpc.CustomCategory} returns this
 */
proto.frdrpc.CustomCategory.prototype.setOnChain = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool off_chain = 3;
 * @return {boolean}
 */
proto.frdrpc.CustomCategory.prototype.getOffChain = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.frdrpc.CustomCategory} returns this
 */
proto.frdrpc.CustomCategory.prototype.setOffChain = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated string label_patterns = 5;
 * @return {!Array<string>}
 */
proto.frdrpc.CustomCategory.prototype.getLabelPatternsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.frdrpc.CustomCategory} returns this
 */
proto.frdrpc.CustomCategory.prototype.setLabelPatternsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.frdrpc.CustomCategory} returns this
 */
proto.frdrpc.CustomCategory.prototype.addLabelPatterns = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.frdrpc.CustomCategory} returns this
 */
proto.frdrpc.CustomCategory.prototype.clearLabelPatternsList = function() {
  return this.setLabelPatternsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.ReportEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.ReportEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.ReportEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.ReportEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    onChain: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    credit: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    asset: jspb.Message.getFieldWithDefault(msg, 5, ""),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0),
    customCategory: jspb.Message.getFieldWithDefault(msg, 12, ""),
    txid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    fiat: jspb.Message.getFieldWithDefault(msg, 8, ""),
    reference: jspb.Message.getFieldWithDefault(msg, 9, ""),
    note: jspb.Message.getFieldWithDefault(msg, 10, ""),
    btcPrice: (f = msg.getBtcPrice()) && proto.frdrpc.BitcoinPrice.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.ReportEntry}
 */
proto.frdrpc.ReportEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.ReportEntry;
  return proto.frdrpc.ReportEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.ReportEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.ReportEntry}
 */
proto.frdrpc.ReportEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnChain(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCredit(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 6:
      var value = /** @type {!proto.frdrpc.EntryType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomCategory(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFiat(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setReference(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 11:
      var value = new proto.frdrpc.BitcoinPrice;
      reader.readMessage(value,proto.frdrpc.BitcoinPrice.deserializeBinaryFromReader);
      msg.setBtcPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.ReportEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.ReportEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.ReportEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.ReportEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOnChain();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getCredit();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getAsset();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getCustomCategory();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getTxid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getFiat();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getReference();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getBtcPrice();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.frdrpc.BitcoinPrice.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 timestamp = 1;
 * @return {number}
 */
proto.frdrpc.ReportEntry.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.ReportEntry} returns this
 */
proto.frdrpc.ReportEntry.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool on_chain = 2;
 * @return {boolean}
 */
proto.frdrpc.ReportEntry.prototype.getOnChain = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.frdrpc.ReportEntry} returns this
 */
proto.frdrpc.ReportEntry.prototype.setOnChain = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint64 amount = 3;
 * @return {number}
 */
proto.frdrpc.ReportEntry.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.frdrpc.ReportEntry} returns this
 */
proto.frdrpc.ReportEntry.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool credit = 4;
 * @return {boolean}
 */
proto.frdrpc.ReportEntry.prototype.getCredit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.frdrpc.ReportEntry} returns this
 */
proto.frdrpc.ReportEntry.prototype.setCredit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string asset = 5;
 * @return {string}
 */
proto.frdrpc.ReportEntry.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.frdrpc.ReportEntry} returns this
 */
proto.frdrpc.ReportEntry.prototype.setAsset = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional EntryType type = 6;
 * @return {!proto.frdrpc.EntryType}
 */
proto.frdrpc.ReportEntry.prototype.getType = function() {
  return /** @type {!proto.frdrpc.EntryType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.frdrpc.EntryType} value
 * @return {!proto.frdrpc.ReportEntry} returns this
 */
proto.frdrpc.ReportEntry.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional string custom_category = 12;
 * @return {string}
 */
proto.frdrpc.ReportEntry.prototype.getCustomCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.frdrpc.ReportEntry} returns this
 */
proto.frdrpc.ReportEntry.prototype.setCustomCategory = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string txid = 7;
 * @return {string}
 */
proto.frdrpc.ReportEntry.prototype.getTxid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.frdrpc.ReportEntry} returns this
 */
proto.frdrpc.ReportEntry.prototype.setTxid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string fiat = 8;
 * @return {string}
 */
proto.frdrpc.ReportEntry.prototype.getFiat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.frdrpc.ReportEntry} returns this
 */
proto.frdrpc.ReportEntry.prototype.setFiat = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string reference = 9;
 * @return {string}
 */
proto.frdrpc.ReportEntry.prototype.getReference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.frdrpc.ReportEntry} returns this
 */
proto.frdrpc.ReportEntry.prototype.setReference = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string note = 10;
 * @return {string}
 */
proto.frdrpc.ReportEntry.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.frdrpc.ReportEntry} returns this
 */
proto.frdrpc.ReportEntry.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional BitcoinPrice btc_price = 11;
 * @return {?proto.frdrpc.BitcoinPrice}
 */
proto.frdrpc.ReportEntry.prototype.getBtcPrice = function() {
  return /** @type{?proto.frdrpc.BitcoinPrice} */ (
    jspb.Message.getWrapperField(this, proto.frdrpc.BitcoinPrice, 11));
};


/**
 * @param {?proto.frdrpc.BitcoinPrice|undefined} value
 * @return {!proto.frdrpc.ReportEntry} returns this
*/
proto.frdrpc.ReportEntry.prototype.setBtcPrice = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.frdrpc.ReportEntry} returns this
 */
proto.frdrpc.ReportEntry.prototype.clearBtcPrice = function() {
  return this.setBtcPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.frdrpc.ReportEntry.prototype.hasBtcPrice = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.frdrpc.NodeAuditResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.NodeAuditResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.NodeAuditResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.NodeAuditResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.NodeAuditResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportsList: jspb.Message.toObjectList(msg.getReportsList(),
    proto.frdrpc.ReportEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.NodeAuditResponse}
 */
proto.frdrpc.NodeAuditResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.NodeAuditResponse;
  return proto.frdrpc.NodeAuditResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.NodeAuditResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.NodeAuditResponse}
 */
proto.frdrpc.NodeAuditResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.frdrpc.ReportEntry;
      reader.readMessage(value,proto.frdrpc.ReportEntry.deserializeBinaryFromReader);
      msg.addReports(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.NodeAuditResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.NodeAuditResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.NodeAuditResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.NodeAuditResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.frdrpc.ReportEntry.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ReportEntry reports = 1;
 * @return {!Array<!proto.frdrpc.ReportEntry>}
 */
proto.frdrpc.NodeAuditResponse.prototype.getReportsList = function() {
  return /** @type{!Array<!proto.frdrpc.ReportEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.frdrpc.ReportEntry, 1));
};


/**
 * @param {!Array<!proto.frdrpc.ReportEntry>} value
 * @return {!proto.frdrpc.NodeAuditResponse} returns this
*/
proto.frdrpc.NodeAuditResponse.prototype.setReportsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.frdrpc.ReportEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.frdrpc.ReportEntry}
 */
proto.frdrpc.NodeAuditResponse.prototype.addReports = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.frdrpc.ReportEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.frdrpc.NodeAuditResponse} returns this
 */
proto.frdrpc.NodeAuditResponse.prototype.clearReportsList = function() {
  return this.setReportsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.CloseReportRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.CloseReportRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.CloseReportRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.CloseReportRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelPoint: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.CloseReportRequest}
 */
proto.frdrpc.CloseReportRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.CloseReportRequest;
  return proto.frdrpc.CloseReportRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.CloseReportRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.CloseReportRequest}
 */
proto.frdrpc.CloseReportRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.CloseReportRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.CloseReportRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.CloseReportRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.CloseReportRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelPoint();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string channel_point = 1;
 * @return {string}
 */
proto.frdrpc.CloseReportRequest.prototype.getChannelPoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.frdrpc.CloseReportRequest} returns this
 */
proto.frdrpc.CloseReportRequest.prototype.setChannelPoint = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frdrpc.CloseReportResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.frdrpc.CloseReportResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frdrpc.CloseReportResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.CloseReportResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelPoint: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channelInitiator: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    closeType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    closeTxid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    openFee: jspb.Message.getFieldWithDefault(msg, 5, ""),
    closeFee: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frdrpc.CloseReportResponse}
 */
proto.frdrpc.CloseReportResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frdrpc.CloseReportResponse;
  return proto.frdrpc.CloseReportResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frdrpc.CloseReportResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frdrpc.CloseReportResponse}
 */
proto.frdrpc.CloseReportResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelPoint(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChannelInitiator(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCloseType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCloseTxid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpenFee(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCloseFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frdrpc.CloseReportResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frdrpc.CloseReportResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frdrpc.CloseReportResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frdrpc.CloseReportResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelPoint();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannelInitiator();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCloseType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCloseTxid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOpenFee();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCloseFee();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string channel_point = 1;
 * @return {string}
 */
proto.frdrpc.CloseReportResponse.prototype.getChannelPoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.frdrpc.CloseReportResponse} returns this
 */
proto.frdrpc.CloseReportResponse.prototype.setChannelPoint = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool channel_initiator = 2;
 * @return {boolean}
 */
proto.frdrpc.CloseReportResponse.prototype.getChannelInitiator = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.frdrpc.CloseReportResponse} returns this
 */
proto.frdrpc.CloseReportResponse.prototype.setChannelInitiator = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string close_type = 3;
 * @return {string}
 */
proto.frdrpc.CloseReportResponse.prototype.getCloseType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.frdrpc.CloseReportResponse} returns this
 */
proto.frdrpc.CloseReportResponse.prototype.setCloseType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string close_txid = 4;
 * @return {string}
 */
proto.frdrpc.CloseReportResponse.prototype.getCloseTxid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.frdrpc.CloseReportResponse} returns this
 */
proto.frdrpc.CloseReportResponse.prototype.setCloseTxid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string open_fee = 5;
 * @return {string}
 */
proto.frdrpc.CloseReportResponse.prototype.getOpenFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.frdrpc.CloseReportResponse} returns this
 */
proto.frdrpc.CloseReportResponse.prototype.setOpenFee = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string close_fee = 6;
 * @return {string}
 */
proto.frdrpc.CloseReportResponse.prototype.getCloseFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.frdrpc.CloseReportResponse} returns this
 */
proto.frdrpc.CloseReportResponse.prototype.setCloseFee = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * @enum {number}
 */
proto.frdrpc.Granularity = {
  UNKNOWN_GRANULARITY: 0,
  MINUTE: 1,
  FIVE_MINUTES: 2,
  FIFTEEN_MINUTES: 3,
  THIRTY_MINUTES: 4,
  HOUR: 5,
  SIX_HOURS: 6,
  TWELVE_HOURS: 7,
  DAY: 8
};

/**
 * @enum {number}
 */
proto.frdrpc.FiatBackend = {
  UNKNOWN_FIATBACKEND: 0,
  COINCAP: 1,
  COINDESK: 2
};

/**
 * @enum {number}
 */
proto.frdrpc.EntryType = {
  UNKNOWN: 0,
  LOCAL_CHANNEL_OPEN: 1,
  REMOTE_CHANNEL_OPEN: 2,
  CHANNEL_OPEN_FEE: 3,
  CHANNEL_CLOSE: 4,
  RECEIPT: 5,
  PAYMENT: 6,
  FEE: 7,
  CIRCULAR_RECEIPT: 8,
  FORWARD: 9,
  FORWARD_FEE: 10,
  CIRCULAR_PAYMENT: 11,
  CIRCULAR_FEE: 12,
  SWEEP: 13,
  SWEEP_FEE: 14,
  CHANNEL_CLOSE_FEE: 15
};

goog.object.extend(exports, proto.frdrpc);
