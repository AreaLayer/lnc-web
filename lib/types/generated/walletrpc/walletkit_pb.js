// source: walletrpc/walletkit.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var lightning_pb = require('../lightning_pb.js');
goog.object.extend(proto, lightning_pb);
var signrpc_signer_pb = require('../signrpc/signer_pb.js');
goog.object.extend(proto, signrpc_signer_pb);
goog.exportSymbol('proto.walletrpc.Account', null, global);
goog.exportSymbol('proto.walletrpc.AddrRequest', null, global);
goog.exportSymbol('proto.walletrpc.AddrResponse', null, global);
goog.exportSymbol('proto.walletrpc.AddressType', null, global);
goog.exportSymbol('proto.walletrpc.BumpFeeRequest', null, global);
goog.exportSymbol('proto.walletrpc.BumpFeeResponse', null, global);
goog.exportSymbol('proto.walletrpc.EstimateFeeRequest', null, global);
goog.exportSymbol('proto.walletrpc.EstimateFeeResponse', null, global);
goog.exportSymbol('proto.walletrpc.FinalizePsbtRequest', null, global);
goog.exportSymbol('proto.walletrpc.FinalizePsbtResponse', null, global);
goog.exportSymbol('proto.walletrpc.FundPsbtRequest', null, global);
goog.exportSymbol('proto.walletrpc.FundPsbtRequest.FeesCase', null, global);
goog.exportSymbol('proto.walletrpc.FundPsbtRequest.TemplateCase', null, global);
goog.exportSymbol('proto.walletrpc.FundPsbtResponse', null, global);
goog.exportSymbol('proto.walletrpc.ImportAccountRequest', null, global);
goog.exportSymbol('proto.walletrpc.ImportAccountResponse', null, global);
goog.exportSymbol('proto.walletrpc.ImportPublicKeyRequest', null, global);
goog.exportSymbol('proto.walletrpc.ImportPublicKeyResponse', null, global);
goog.exportSymbol('proto.walletrpc.KeyReq', null, global);
goog.exportSymbol('proto.walletrpc.LabelTransactionRequest', null, global);
goog.exportSymbol('proto.walletrpc.LabelTransactionResponse', null, global);
goog.exportSymbol('proto.walletrpc.LeaseOutputRequest', null, global);
goog.exportSymbol('proto.walletrpc.LeaseOutputResponse', null, global);
goog.exportSymbol('proto.walletrpc.ListAccountsRequest', null, global);
goog.exportSymbol('proto.walletrpc.ListAccountsResponse', null, global);
goog.exportSymbol('proto.walletrpc.ListLeasesRequest', null, global);
goog.exportSymbol('proto.walletrpc.ListLeasesResponse', null, global);
goog.exportSymbol('proto.walletrpc.ListSweepsRequest', null, global);
goog.exportSymbol('proto.walletrpc.ListSweepsResponse', null, global);
goog.exportSymbol('proto.walletrpc.ListSweepsResponse.SweepsCase', null, global);
goog.exportSymbol('proto.walletrpc.ListSweepsResponse.TransactionIDs', null, global);
goog.exportSymbol('proto.walletrpc.ListUnspentRequest', null, global);
goog.exportSymbol('proto.walletrpc.ListUnspentResponse', null, global);
goog.exportSymbol('proto.walletrpc.PendingSweep', null, global);
goog.exportSymbol('proto.walletrpc.PendingSweepsRequest', null, global);
goog.exportSymbol('proto.walletrpc.PendingSweepsResponse', null, global);
goog.exportSymbol('proto.walletrpc.PublishResponse', null, global);
goog.exportSymbol('proto.walletrpc.ReleaseOutputRequest', null, global);
goog.exportSymbol('proto.walletrpc.ReleaseOutputResponse', null, global);
goog.exportSymbol('proto.walletrpc.SendOutputsRequest', null, global);
goog.exportSymbol('proto.walletrpc.SendOutputsResponse', null, global);
goog.exportSymbol('proto.walletrpc.SignPsbtRequest', null, global);
goog.exportSymbol('proto.walletrpc.SignPsbtResponse', null, global);
goog.exportSymbol('proto.walletrpc.Transaction', null, global);
goog.exportSymbol('proto.walletrpc.TxTemplate', null, global);
goog.exportSymbol('proto.walletrpc.UtxoLease', null, global);
goog.exportSymbol('proto.walletrpc.WitnessType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.ListUnspentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.ListUnspentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.ListUnspentRequest.displayName = 'proto.walletrpc.ListUnspentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.ListUnspentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.walletrpc.ListUnspentResponse.repeatedFields_, null);
};
goog.inherits(proto.walletrpc.ListUnspentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.ListUnspentResponse.displayName = 'proto.walletrpc.ListUnspentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.LeaseOutputRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.LeaseOutputRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.LeaseOutputRequest.displayName = 'proto.walletrpc.LeaseOutputRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.LeaseOutputResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.LeaseOutputResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.LeaseOutputResponse.displayName = 'proto.walletrpc.LeaseOutputResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.ReleaseOutputRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.ReleaseOutputRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.ReleaseOutputRequest.displayName = 'proto.walletrpc.ReleaseOutputRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.ReleaseOutputResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.ReleaseOutputResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.ReleaseOutputResponse.displayName = 'proto.walletrpc.ReleaseOutputResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.KeyReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.KeyReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.KeyReq.displayName = 'proto.walletrpc.KeyReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.AddrRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.AddrRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.AddrRequest.displayName = 'proto.walletrpc.AddrRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.AddrResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.AddrResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.AddrResponse.displayName = 'proto.walletrpc.AddrResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.Account = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.Account.displayName = 'proto.walletrpc.Account';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.ListAccountsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.ListAccountsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.ListAccountsRequest.displayName = 'proto.walletrpc.ListAccountsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.ListAccountsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.walletrpc.ListAccountsResponse.repeatedFields_, null);
};
goog.inherits(proto.walletrpc.ListAccountsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.ListAccountsResponse.displayName = 'proto.walletrpc.ListAccountsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.ImportAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.ImportAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.ImportAccountRequest.displayName = 'proto.walletrpc.ImportAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.ImportAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.walletrpc.ImportAccountResponse.repeatedFields_, null);
};
goog.inherits(proto.walletrpc.ImportAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.ImportAccountResponse.displayName = 'proto.walletrpc.ImportAccountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.ImportPublicKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.ImportPublicKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.ImportPublicKeyRequest.displayName = 'proto.walletrpc.ImportPublicKeyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.ImportPublicKeyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.ImportPublicKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.ImportPublicKeyResponse.displayName = 'proto.walletrpc.ImportPublicKeyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.Transaction.displayName = 'proto.walletrpc.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.PublishResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.PublishResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.PublishResponse.displayName = 'proto.walletrpc.PublishResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.SendOutputsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.walletrpc.SendOutputsRequest.repeatedFields_, null);
};
goog.inherits(proto.walletrpc.SendOutputsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.SendOutputsRequest.displayName = 'proto.walletrpc.SendOutputsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.SendOutputsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.SendOutputsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.SendOutputsResponse.displayName = 'proto.walletrpc.SendOutputsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.EstimateFeeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.EstimateFeeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.EstimateFeeRequest.displayName = 'proto.walletrpc.EstimateFeeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.EstimateFeeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.EstimateFeeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.EstimateFeeResponse.displayName = 'proto.walletrpc.EstimateFeeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.PendingSweep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.PendingSweep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.PendingSweep.displayName = 'proto.walletrpc.PendingSweep';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.PendingSweepsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.PendingSweepsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.PendingSweepsRequest.displayName = 'proto.walletrpc.PendingSweepsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.PendingSweepsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.walletrpc.PendingSweepsResponse.repeatedFields_, null);
};
goog.inherits(proto.walletrpc.PendingSweepsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.PendingSweepsResponse.displayName = 'proto.walletrpc.PendingSweepsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.BumpFeeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.BumpFeeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.BumpFeeRequest.displayName = 'proto.walletrpc.BumpFeeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.BumpFeeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.BumpFeeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.BumpFeeResponse.displayName = 'proto.walletrpc.BumpFeeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.ListSweepsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.ListSweepsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.ListSweepsRequest.displayName = 'proto.walletrpc.ListSweepsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.ListSweepsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.walletrpc.ListSweepsResponse.oneofGroups_);
};
goog.inherits(proto.walletrpc.ListSweepsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.ListSweepsResponse.displayName = 'proto.walletrpc.ListSweepsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.ListSweepsResponse.TransactionIDs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.walletrpc.ListSweepsResponse.TransactionIDs.repeatedFields_, null);
};
goog.inherits(proto.walletrpc.ListSweepsResponse.TransactionIDs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.ListSweepsResponse.TransactionIDs.displayName = 'proto.walletrpc.ListSweepsResponse.TransactionIDs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.LabelTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.LabelTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.LabelTransactionRequest.displayName = 'proto.walletrpc.LabelTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.LabelTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.LabelTransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.LabelTransactionResponse.displayName = 'proto.walletrpc.LabelTransactionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.FundPsbtRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.walletrpc.FundPsbtRequest.oneofGroups_);
};
goog.inherits(proto.walletrpc.FundPsbtRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.FundPsbtRequest.displayName = 'proto.walletrpc.FundPsbtRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.FundPsbtResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.walletrpc.FundPsbtResponse.repeatedFields_, null);
};
goog.inherits(proto.walletrpc.FundPsbtResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.FundPsbtResponse.displayName = 'proto.walletrpc.FundPsbtResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.TxTemplate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.walletrpc.TxTemplate.repeatedFields_, null);
};
goog.inherits(proto.walletrpc.TxTemplate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.TxTemplate.displayName = 'proto.walletrpc.TxTemplate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.UtxoLease = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.UtxoLease, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.UtxoLease.displayName = 'proto.walletrpc.UtxoLease';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.SignPsbtRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.SignPsbtRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.SignPsbtRequest.displayName = 'proto.walletrpc.SignPsbtRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.SignPsbtResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.SignPsbtResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.SignPsbtResponse.displayName = 'proto.walletrpc.SignPsbtResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.FinalizePsbtRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.FinalizePsbtRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.FinalizePsbtRequest.displayName = 'proto.walletrpc.FinalizePsbtRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.FinalizePsbtResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.FinalizePsbtResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.FinalizePsbtResponse.displayName = 'proto.walletrpc.FinalizePsbtResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.ListLeasesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.walletrpc.ListLeasesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.ListLeasesRequest.displayName = 'proto.walletrpc.ListLeasesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.walletrpc.ListLeasesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.walletrpc.ListLeasesResponse.repeatedFields_, null);
};
goog.inherits(proto.walletrpc.ListLeasesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.walletrpc.ListLeasesResponse.displayName = 'proto.walletrpc.ListLeasesResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.ListUnspentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.ListUnspentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.ListUnspentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ListUnspentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    minConfs: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxConfs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    account: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.ListUnspentRequest}
 */
proto.walletrpc.ListUnspentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.ListUnspentRequest;
  return proto.walletrpc.ListUnspentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.ListUnspentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.ListUnspentRequest}
 */
proto.walletrpc.ListUnspentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinConfs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxConfs(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.ListUnspentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.ListUnspentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.ListUnspentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ListUnspentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinConfs();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMaxConfs();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAccount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 min_confs = 1;
 * @return {number}
 */
proto.walletrpc.ListUnspentRequest.prototype.getMinConfs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.ListUnspentRequest} returns this
 */
proto.walletrpc.ListUnspentRequest.prototype.setMinConfs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 max_confs = 2;
 * @return {number}
 */
proto.walletrpc.ListUnspentRequest.prototype.getMaxConfs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.ListUnspentRequest} returns this
 */
proto.walletrpc.ListUnspentRequest.prototype.setMaxConfs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string account = 3;
 * @return {string}
 */
proto.walletrpc.ListUnspentRequest.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.walletrpc.ListUnspentRequest} returns this
 */
proto.walletrpc.ListUnspentRequest.prototype.setAccount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.walletrpc.ListUnspentResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.ListUnspentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.ListUnspentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.ListUnspentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ListUnspentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    utxosList: jspb.Message.toObjectList(msg.getUtxosList(),
    lightning_pb.Utxo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.ListUnspentResponse}
 */
proto.walletrpc.ListUnspentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.ListUnspentResponse;
  return proto.walletrpc.ListUnspentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.ListUnspentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.ListUnspentResponse}
 */
proto.walletrpc.ListUnspentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lightning_pb.Utxo;
      reader.readMessage(value,lightning_pb.Utxo.deserializeBinaryFromReader);
      msg.addUtxos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.ListUnspentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.ListUnspentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.ListUnspentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ListUnspentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUtxosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      lightning_pb.Utxo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated lnrpc.Utxo utxos = 1;
 * @return {!Array<!proto.lnrpc.Utxo>}
 */
proto.walletrpc.ListUnspentResponse.prototype.getUtxosList = function() {
  return /** @type{!Array<!proto.lnrpc.Utxo>} */ (
    jspb.Message.getRepeatedWrapperField(this, lightning_pb.Utxo, 1));
};


/**
 * @param {!Array<!proto.lnrpc.Utxo>} value
 * @return {!proto.walletrpc.ListUnspentResponse} returns this
*/
proto.walletrpc.ListUnspentResponse.prototype.setUtxosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.lnrpc.Utxo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lnrpc.Utxo}
 */
proto.walletrpc.ListUnspentResponse.prototype.addUtxos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.lnrpc.Utxo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.walletrpc.ListUnspentResponse} returns this
 */
proto.walletrpc.ListUnspentResponse.prototype.clearUtxosList = function() {
  return this.setUtxosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.LeaseOutputRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.LeaseOutputRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.LeaseOutputRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.LeaseOutputRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    outpoint: (f = msg.getOutpoint()) && lightning_pb.OutPoint.toObject(includeInstance, f),
    expirationSeconds: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.LeaseOutputRequest}
 */
proto.walletrpc.LeaseOutputRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.LeaseOutputRequest;
  return proto.walletrpc.LeaseOutputRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.LeaseOutputRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.LeaseOutputRequest}
 */
proto.walletrpc.LeaseOutputRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = new lightning_pb.OutPoint;
      reader.readMessage(value,lightning_pb.OutPoint.deserializeBinaryFromReader);
      msg.setOutpoint(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpirationSeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.LeaseOutputRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.LeaseOutputRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.LeaseOutputRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.LeaseOutputRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getOutpoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lightning_pb.OutPoint.serializeBinaryToWriter
    );
  }
  f = message.getExpirationSeconds();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.walletrpc.LeaseOutputRequest.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.walletrpc.LeaseOutputRequest.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.walletrpc.LeaseOutputRequest.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.walletrpc.LeaseOutputRequest} returns this
 */
proto.walletrpc.LeaseOutputRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional lnrpc.OutPoint outpoint = 2;
 * @return {?proto.lnrpc.OutPoint}
 */
proto.walletrpc.LeaseOutputRequest.prototype.getOutpoint = function() {
  return /** @type{?proto.lnrpc.OutPoint} */ (
    jspb.Message.getWrapperField(this, lightning_pb.OutPoint, 2));
};


/**
 * @param {?proto.lnrpc.OutPoint|undefined} value
 * @return {!proto.walletrpc.LeaseOutputRequest} returns this
*/
proto.walletrpc.LeaseOutputRequest.prototype.setOutpoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.walletrpc.LeaseOutputRequest} returns this
 */
proto.walletrpc.LeaseOutputRequest.prototype.clearOutpoint = function() {
  return this.setOutpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.walletrpc.LeaseOutputRequest.prototype.hasOutpoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 expiration_seconds = 3;
 * @return {number}
 */
proto.walletrpc.LeaseOutputRequest.prototype.getExpirationSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.LeaseOutputRequest} returns this
 */
proto.walletrpc.LeaseOutputRequest.prototype.setExpirationSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.LeaseOutputResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.LeaseOutputResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.LeaseOutputResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.LeaseOutputResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    expiration: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.LeaseOutputResponse}
 */
proto.walletrpc.LeaseOutputResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.LeaseOutputResponse;
  return proto.walletrpc.LeaseOutputResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.LeaseOutputResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.LeaseOutputResponse}
 */
proto.walletrpc.LeaseOutputResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpiration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.LeaseOutputResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.LeaseOutputResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.LeaseOutputResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.LeaseOutputResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpiration();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 expiration = 1;
 * @return {number}
 */
proto.walletrpc.LeaseOutputResponse.prototype.getExpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.LeaseOutputResponse} returns this
 */
proto.walletrpc.LeaseOutputResponse.prototype.setExpiration = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.ReleaseOutputRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.ReleaseOutputRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.ReleaseOutputRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ReleaseOutputRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    outpoint: (f = msg.getOutpoint()) && lightning_pb.OutPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.ReleaseOutputRequest}
 */
proto.walletrpc.ReleaseOutputRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.ReleaseOutputRequest;
  return proto.walletrpc.ReleaseOutputRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.ReleaseOutputRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.ReleaseOutputRequest}
 */
proto.walletrpc.ReleaseOutputRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = new lightning_pb.OutPoint;
      reader.readMessage(value,lightning_pb.OutPoint.deserializeBinaryFromReader);
      msg.setOutpoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.ReleaseOutputRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.ReleaseOutputRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.ReleaseOutputRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ReleaseOutputRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getOutpoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lightning_pb.OutPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.walletrpc.ReleaseOutputRequest.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.walletrpc.ReleaseOutputRequest.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.walletrpc.ReleaseOutputRequest.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.walletrpc.ReleaseOutputRequest} returns this
 */
proto.walletrpc.ReleaseOutputRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional lnrpc.OutPoint outpoint = 2;
 * @return {?proto.lnrpc.OutPoint}
 */
proto.walletrpc.ReleaseOutputRequest.prototype.getOutpoint = function() {
  return /** @type{?proto.lnrpc.OutPoint} */ (
    jspb.Message.getWrapperField(this, lightning_pb.OutPoint, 2));
};


/**
 * @param {?proto.lnrpc.OutPoint|undefined} value
 * @return {!proto.walletrpc.ReleaseOutputRequest} returns this
*/
proto.walletrpc.ReleaseOutputRequest.prototype.setOutpoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.walletrpc.ReleaseOutputRequest} returns this
 */
proto.walletrpc.ReleaseOutputRequest.prototype.clearOutpoint = function() {
  return this.setOutpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.walletrpc.ReleaseOutputRequest.prototype.hasOutpoint = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.ReleaseOutputResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.ReleaseOutputResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.ReleaseOutputResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ReleaseOutputResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.ReleaseOutputResponse}
 */
proto.walletrpc.ReleaseOutputResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.ReleaseOutputResponse;
  return proto.walletrpc.ReleaseOutputResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.ReleaseOutputResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.ReleaseOutputResponse}
 */
proto.walletrpc.ReleaseOutputResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.ReleaseOutputResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.ReleaseOutputResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.ReleaseOutputResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ReleaseOutputResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.KeyReq.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.KeyReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.KeyReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.KeyReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyFingerPrint: jspb.Message.getFieldWithDefault(msg, 1, 0),
    keyFamily: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.KeyReq}
 */
proto.walletrpc.KeyReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.KeyReq;
  return proto.walletrpc.KeyReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.KeyReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.KeyReq}
 */
proto.walletrpc.KeyReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKeyFingerPrint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKeyFamily(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.KeyReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.KeyReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.KeyReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.KeyReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyFingerPrint();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getKeyFamily();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 key_finger_print = 1;
 * @return {number}
 */
proto.walletrpc.KeyReq.prototype.getKeyFingerPrint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.KeyReq} returns this
 */
proto.walletrpc.KeyReq.prototype.setKeyFingerPrint = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 key_family = 2;
 * @return {number}
 */
proto.walletrpc.KeyReq.prototype.getKeyFamily = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.KeyReq} returns this
 */
proto.walletrpc.KeyReq.prototype.setKeyFamily = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.AddrRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.AddrRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.AddrRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.AddrRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    change: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.AddrRequest}
 */
proto.walletrpc.AddrRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.AddrRequest;
  return proto.walletrpc.AddrRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.AddrRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.AddrRequest}
 */
proto.walletrpc.AddrRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {!proto.walletrpc.AddressType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.AddrRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.AddrRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.AddrRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.AddrRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getChange();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string account = 1;
 * @return {string}
 */
proto.walletrpc.AddrRequest.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.walletrpc.AddrRequest} returns this
 */
proto.walletrpc.AddrRequest.prototype.setAccount = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AddressType type = 2;
 * @return {!proto.walletrpc.AddressType}
 */
proto.walletrpc.AddrRequest.prototype.getType = function() {
  return /** @type {!proto.walletrpc.AddressType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.walletrpc.AddressType} value
 * @return {!proto.walletrpc.AddrRequest} returns this
 */
proto.walletrpc.AddrRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool change = 3;
 * @return {boolean}
 */
proto.walletrpc.AddrRequest.prototype.getChange = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.walletrpc.AddrRequest} returns this
 */
proto.walletrpc.AddrRequest.prototype.setChange = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.AddrResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.AddrResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.AddrResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.AddrResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    addr: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.AddrResponse}
 */
proto.walletrpc.AddrResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.AddrResponse;
  return proto.walletrpc.AddrResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.AddrResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.AddrResponse}
 */
proto.walletrpc.AddrResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.AddrResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.AddrResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.AddrResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.AddrResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string addr = 1;
 * @return {string}
 */
proto.walletrpc.AddrResponse.prototype.getAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.walletrpc.AddrResponse} returns this
 */
proto.walletrpc.AddrResponse.prototype.setAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.Account.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.Account.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.Account} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.Account.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addressType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    extendedPublicKey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    masterKeyFingerprint: msg.getMasterKeyFingerprint_asB64(),
    derivationPath: jspb.Message.getFieldWithDefault(msg, 5, ""),
    externalKeyCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    internalKeyCount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    watchOnly: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.Account}
 */
proto.walletrpc.Account.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.Account;
  return proto.walletrpc.Account.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.Account}
 */
proto.walletrpc.Account.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.walletrpc.AddressType} */ (reader.readEnum());
      msg.setAddressType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtendedPublicKey(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMasterKeyFingerprint(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDerivationPath(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExternalKeyCount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInternalKeyCount(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWatchOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.Account.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.Account.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.Account} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.Account.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddressType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getExtendedPublicKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMasterKeyFingerprint_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getDerivationPath();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getExternalKeyCount();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getInternalKeyCount();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getWatchOnly();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.walletrpc.Account.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.walletrpc.Account} returns this
 */
proto.walletrpc.Account.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AddressType address_type = 2;
 * @return {!proto.walletrpc.AddressType}
 */
proto.walletrpc.Account.prototype.getAddressType = function() {
  return /** @type {!proto.walletrpc.AddressType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.walletrpc.AddressType} value
 * @return {!proto.walletrpc.Account} returns this
 */
proto.walletrpc.Account.prototype.setAddressType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string extended_public_key = 3;
 * @return {string}
 */
proto.walletrpc.Account.prototype.getExtendedPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.walletrpc.Account} returns this
 */
proto.walletrpc.Account.prototype.setExtendedPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes master_key_fingerprint = 4;
 * @return {!(string|Uint8Array)}
 */
proto.walletrpc.Account.prototype.getMasterKeyFingerprint = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes master_key_fingerprint = 4;
 * This is a type-conversion wrapper around `getMasterKeyFingerprint()`
 * @return {string}
 */
proto.walletrpc.Account.prototype.getMasterKeyFingerprint_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMasterKeyFingerprint()));
};


/**
 * optional bytes master_key_fingerprint = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMasterKeyFingerprint()`
 * @return {!Uint8Array}
 */
proto.walletrpc.Account.prototype.getMasterKeyFingerprint_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMasterKeyFingerprint()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.walletrpc.Account} returns this
 */
proto.walletrpc.Account.prototype.setMasterKeyFingerprint = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string derivation_path = 5;
 * @return {string}
 */
proto.walletrpc.Account.prototype.getDerivationPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.walletrpc.Account} returns this
 */
proto.walletrpc.Account.prototype.setDerivationPath = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 external_key_count = 6;
 * @return {number}
 */
proto.walletrpc.Account.prototype.getExternalKeyCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.Account} returns this
 */
proto.walletrpc.Account.prototype.setExternalKeyCount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 internal_key_count = 7;
 * @return {number}
 */
proto.walletrpc.Account.prototype.getInternalKeyCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.Account} returns this
 */
proto.walletrpc.Account.prototype.setInternalKeyCount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool watch_only = 8;
 * @return {boolean}
 */
proto.walletrpc.Account.prototype.getWatchOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.walletrpc.Account} returns this
 */
proto.walletrpc.Account.prototype.setWatchOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.ListAccountsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.ListAccountsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.ListAccountsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ListAccountsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addressType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.ListAccountsRequest}
 */
proto.walletrpc.ListAccountsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.ListAccountsRequest;
  return proto.walletrpc.ListAccountsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.ListAccountsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.ListAccountsRequest}
 */
proto.walletrpc.ListAccountsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.walletrpc.AddressType} */ (reader.readEnum());
      msg.setAddressType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.ListAccountsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.ListAccountsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.ListAccountsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ListAccountsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddressType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.walletrpc.ListAccountsRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.walletrpc.ListAccountsRequest} returns this
 */
proto.walletrpc.ListAccountsRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AddressType address_type = 2;
 * @return {!proto.walletrpc.AddressType}
 */
proto.walletrpc.ListAccountsRequest.prototype.getAddressType = function() {
  return /** @type {!proto.walletrpc.AddressType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.walletrpc.AddressType} value
 * @return {!proto.walletrpc.ListAccountsRequest} returns this
 */
proto.walletrpc.ListAccountsRequest.prototype.setAddressType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.walletrpc.ListAccountsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.ListAccountsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.ListAccountsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.ListAccountsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ListAccountsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountsList: jspb.Message.toObjectList(msg.getAccountsList(),
    proto.walletrpc.Account.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.ListAccountsResponse}
 */
proto.walletrpc.ListAccountsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.ListAccountsResponse;
  return proto.walletrpc.ListAccountsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.ListAccountsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.ListAccountsResponse}
 */
proto.walletrpc.ListAccountsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.walletrpc.Account;
      reader.readMessage(value,proto.walletrpc.Account.deserializeBinaryFromReader);
      msg.addAccounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.ListAccountsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.ListAccountsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.ListAccountsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ListAccountsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.walletrpc.Account.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Account accounts = 1;
 * @return {!Array<!proto.walletrpc.Account>}
 */
proto.walletrpc.ListAccountsResponse.prototype.getAccountsList = function() {
  return /** @type{!Array<!proto.walletrpc.Account>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.walletrpc.Account, 1));
};


/**
 * @param {!Array<!proto.walletrpc.Account>} value
 * @return {!proto.walletrpc.ListAccountsResponse} returns this
*/
proto.walletrpc.ListAccountsResponse.prototype.setAccountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.walletrpc.Account=} opt_value
 * @param {number=} opt_index
 * @return {!proto.walletrpc.Account}
 */
proto.walletrpc.ListAccountsResponse.prototype.addAccounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.walletrpc.Account, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.walletrpc.ListAccountsResponse} returns this
 */
proto.walletrpc.ListAccountsResponse.prototype.clearAccountsList = function() {
  return this.setAccountsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.ImportAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.ImportAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.ImportAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ImportAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    extendedPublicKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    masterKeyFingerprint: msg.getMasterKeyFingerprint_asB64(),
    addressType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    dryRun: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.ImportAccountRequest}
 */
proto.walletrpc.ImportAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.ImportAccountRequest;
  return proto.walletrpc.ImportAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.ImportAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.ImportAccountRequest}
 */
proto.walletrpc.ImportAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtendedPublicKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMasterKeyFingerprint(value);
      break;
    case 4:
      var value = /** @type {!proto.walletrpc.AddressType} */ (reader.readEnum());
      msg.setAddressType(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDryRun(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.ImportAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.ImportAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.ImportAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ImportAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExtendedPublicKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMasterKeyFingerprint_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAddressType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getDryRun();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.walletrpc.ImportAccountRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.walletrpc.ImportAccountRequest} returns this
 */
proto.walletrpc.ImportAccountRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string extended_public_key = 2;
 * @return {string}
 */
proto.walletrpc.ImportAccountRequest.prototype.getExtendedPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.walletrpc.ImportAccountRequest} returns this
 */
proto.walletrpc.ImportAccountRequest.prototype.setExtendedPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes master_key_fingerprint = 3;
 * @return {!(string|Uint8Array)}
 */
proto.walletrpc.ImportAccountRequest.prototype.getMasterKeyFingerprint = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes master_key_fingerprint = 3;
 * This is a type-conversion wrapper around `getMasterKeyFingerprint()`
 * @return {string}
 */
proto.walletrpc.ImportAccountRequest.prototype.getMasterKeyFingerprint_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMasterKeyFingerprint()));
};


/**
 * optional bytes master_key_fingerprint = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMasterKeyFingerprint()`
 * @return {!Uint8Array}
 */
proto.walletrpc.ImportAccountRequest.prototype.getMasterKeyFingerprint_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMasterKeyFingerprint()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.walletrpc.ImportAccountRequest} returns this
 */
proto.walletrpc.ImportAccountRequest.prototype.setMasterKeyFingerprint = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional AddressType address_type = 4;
 * @return {!proto.walletrpc.AddressType}
 */
proto.walletrpc.ImportAccountRequest.prototype.getAddressType = function() {
  return /** @type {!proto.walletrpc.AddressType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.walletrpc.AddressType} value
 * @return {!proto.walletrpc.ImportAccountRequest} returns this
 */
proto.walletrpc.ImportAccountRequest.prototype.setAddressType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool dry_run = 5;
 * @return {boolean}
 */
proto.walletrpc.ImportAccountRequest.prototype.getDryRun = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.walletrpc.ImportAccountRequest} returns this
 */
proto.walletrpc.ImportAccountRequest.prototype.setDryRun = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.walletrpc.ImportAccountResponse.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.ImportAccountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.ImportAccountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.ImportAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ImportAccountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && proto.walletrpc.Account.toObject(includeInstance, f),
    dryRunExternalAddrsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    dryRunInternalAddrsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.ImportAccountResponse}
 */
proto.walletrpc.ImportAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.ImportAccountResponse;
  return proto.walletrpc.ImportAccountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.ImportAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.ImportAccountResponse}
 */
proto.walletrpc.ImportAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.walletrpc.Account;
      reader.readMessage(value,proto.walletrpc.Account.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDryRunExternalAddrs(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addDryRunInternalAddrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.ImportAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.ImportAccountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.ImportAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ImportAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.walletrpc.Account.serializeBinaryToWriter
    );
  }
  f = message.getDryRunExternalAddrsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getDryRunInternalAddrsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional Account account = 1;
 * @return {?proto.walletrpc.Account}
 */
proto.walletrpc.ImportAccountResponse.prototype.getAccount = function() {
  return /** @type{?proto.walletrpc.Account} */ (
    jspb.Message.getWrapperField(this, proto.walletrpc.Account, 1));
};


/**
 * @param {?proto.walletrpc.Account|undefined} value
 * @return {!proto.walletrpc.ImportAccountResponse} returns this
*/
proto.walletrpc.ImportAccountResponse.prototype.setAccount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.walletrpc.ImportAccountResponse} returns this
 */
proto.walletrpc.ImportAccountResponse.prototype.clearAccount = function() {
  return this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.walletrpc.ImportAccountResponse.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string dry_run_external_addrs = 2;
 * @return {!Array<string>}
 */
proto.walletrpc.ImportAccountResponse.prototype.getDryRunExternalAddrsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.walletrpc.ImportAccountResponse} returns this
 */
proto.walletrpc.ImportAccountResponse.prototype.setDryRunExternalAddrsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.walletrpc.ImportAccountResponse} returns this
 */
proto.walletrpc.ImportAccountResponse.prototype.addDryRunExternalAddrs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.walletrpc.ImportAccountResponse} returns this
 */
proto.walletrpc.ImportAccountResponse.prototype.clearDryRunExternalAddrsList = function() {
  return this.setDryRunExternalAddrsList([]);
};


/**
 * repeated string dry_run_internal_addrs = 3;
 * @return {!Array<string>}
 */
proto.walletrpc.ImportAccountResponse.prototype.getDryRunInternalAddrsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.walletrpc.ImportAccountResponse} returns this
 */
proto.walletrpc.ImportAccountResponse.prototype.setDryRunInternalAddrsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.walletrpc.ImportAccountResponse} returns this
 */
proto.walletrpc.ImportAccountResponse.prototype.addDryRunInternalAddrs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.walletrpc.ImportAccountResponse} returns this
 */
proto.walletrpc.ImportAccountResponse.prototype.clearDryRunInternalAddrsList = function() {
  return this.setDryRunInternalAddrsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.ImportPublicKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.ImportPublicKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.ImportPublicKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ImportPublicKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: msg.getPublicKey_asB64(),
    addressType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.ImportPublicKeyRequest}
 */
proto.walletrpc.ImportPublicKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.ImportPublicKeyRequest;
  return proto.walletrpc.ImportPublicKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.ImportPublicKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.ImportPublicKeyRequest}
 */
proto.walletrpc.ImportPublicKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {!proto.walletrpc.AddressType} */ (reader.readEnum());
      msg.setAddressType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.ImportPublicKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.ImportPublicKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.ImportPublicKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ImportPublicKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAddressType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional bytes public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.walletrpc.ImportPublicKeyRequest.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.walletrpc.ImportPublicKeyRequest.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.walletrpc.ImportPublicKeyRequest.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.walletrpc.ImportPublicKeyRequest} returns this
 */
proto.walletrpc.ImportPublicKeyRequest.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional AddressType address_type = 2;
 * @return {!proto.walletrpc.AddressType}
 */
proto.walletrpc.ImportPublicKeyRequest.prototype.getAddressType = function() {
  return /** @type {!proto.walletrpc.AddressType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.walletrpc.AddressType} value
 * @return {!proto.walletrpc.ImportPublicKeyRequest} returns this
 */
proto.walletrpc.ImportPublicKeyRequest.prototype.setAddressType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.ImportPublicKeyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.ImportPublicKeyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.ImportPublicKeyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ImportPublicKeyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.ImportPublicKeyResponse}
 */
proto.walletrpc.ImportPublicKeyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.ImportPublicKeyResponse;
  return proto.walletrpc.ImportPublicKeyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.ImportPublicKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.ImportPublicKeyResponse}
 */
proto.walletrpc.ImportPublicKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.ImportPublicKeyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.ImportPublicKeyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.ImportPublicKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ImportPublicKeyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    txHex: msg.getTxHex_asB64(),
    label: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.Transaction}
 */
proto.walletrpc.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.Transaction;
  return proto.walletrpc.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.Transaction}
 */
proto.walletrpc.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxHex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxHex_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes tx_hex = 1;
 * @return {!(string|Uint8Array)}
 */
proto.walletrpc.Transaction.prototype.getTxHex = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes tx_hex = 1;
 * This is a type-conversion wrapper around `getTxHex()`
 * @return {string}
 */
proto.walletrpc.Transaction.prototype.getTxHex_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxHex()));
};


/**
 * optional bytes tx_hex = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxHex()`
 * @return {!Uint8Array}
 */
proto.walletrpc.Transaction.prototype.getTxHex_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxHex()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.walletrpc.Transaction} returns this
 */
proto.walletrpc.Transaction.prototype.setTxHex = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string label = 2;
 * @return {string}
 */
proto.walletrpc.Transaction.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.walletrpc.Transaction} returns this
 */
proto.walletrpc.Transaction.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.PublishResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.PublishResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.PublishResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.PublishResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    publishError: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.PublishResponse}
 */
proto.walletrpc.PublishResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.PublishResponse;
  return proto.walletrpc.PublishResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.PublishResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.PublishResponse}
 */
proto.walletrpc.PublishResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublishError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.PublishResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.PublishResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.PublishResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.PublishResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublishError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string publish_error = 1;
 * @return {string}
 */
proto.walletrpc.PublishResponse.prototype.getPublishError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.walletrpc.PublishResponse} returns this
 */
proto.walletrpc.PublishResponse.prototype.setPublishError = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.walletrpc.SendOutputsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.SendOutputsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.SendOutputsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.SendOutputsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.SendOutputsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    satPerKw: jspb.Message.getFieldWithDefault(msg, 1, 0),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    signrpc_signer_pb.TxOut.toObject, includeInstance),
    label: jspb.Message.getFieldWithDefault(msg, 3, ""),
    minConfs: jspb.Message.getFieldWithDefault(msg, 4, 0),
    spendUnconfirmed: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.SendOutputsRequest}
 */
proto.walletrpc.SendOutputsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.SendOutputsRequest;
  return proto.walletrpc.SendOutputsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.SendOutputsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.SendOutputsRequest}
 */
proto.walletrpc.SendOutputsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSatPerKw(value);
      break;
    case 2:
      var value = new signrpc_signer_pb.TxOut;
      reader.readMessage(value,signrpc_signer_pb.TxOut.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinConfs(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSpendUnconfirmed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.SendOutputsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.SendOutputsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.SendOutputsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.SendOutputsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSatPerKw();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      signrpc_signer_pb.TxOut.serializeBinaryToWriter
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMinConfs();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSpendUnconfirmed();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional int64 sat_per_kw = 1;
 * @return {number}
 */
proto.walletrpc.SendOutputsRequest.prototype.getSatPerKw = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.SendOutputsRequest} returns this
 */
proto.walletrpc.SendOutputsRequest.prototype.setSatPerKw = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated signrpc.TxOut outputs = 2;
 * @return {!Array<!proto.signrpc.TxOut>}
 */
proto.walletrpc.SendOutputsRequest.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.signrpc.TxOut>} */ (
    jspb.Message.getRepeatedWrapperField(this, signrpc_signer_pb.TxOut, 2));
};


/**
 * @param {!Array<!proto.signrpc.TxOut>} value
 * @return {!proto.walletrpc.SendOutputsRequest} returns this
*/
proto.walletrpc.SendOutputsRequest.prototype.setOutputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.signrpc.TxOut=} opt_value
 * @param {number=} opt_index
 * @return {!proto.signrpc.TxOut}
 */
proto.walletrpc.SendOutputsRequest.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.signrpc.TxOut, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.walletrpc.SendOutputsRequest} returns this
 */
proto.walletrpc.SendOutputsRequest.prototype.clearOutputsList = function() {
  return this.setOutputsList([]);
};


/**
 * optional string label = 3;
 * @return {string}
 */
proto.walletrpc.SendOutputsRequest.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.walletrpc.SendOutputsRequest} returns this
 */
proto.walletrpc.SendOutputsRequest.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 min_confs = 4;
 * @return {number}
 */
proto.walletrpc.SendOutputsRequest.prototype.getMinConfs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.SendOutputsRequest} returns this
 */
proto.walletrpc.SendOutputsRequest.prototype.setMinConfs = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool spend_unconfirmed = 5;
 * @return {boolean}
 */
proto.walletrpc.SendOutputsRequest.prototype.getSpendUnconfirmed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.walletrpc.SendOutputsRequest} returns this
 */
proto.walletrpc.SendOutputsRequest.prototype.setSpendUnconfirmed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.SendOutputsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.SendOutputsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.SendOutputsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.SendOutputsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    rawTx: msg.getRawTx_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.SendOutputsResponse}
 */
proto.walletrpc.SendOutputsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.SendOutputsResponse;
  return proto.walletrpc.SendOutputsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.SendOutputsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.SendOutputsResponse}
 */
proto.walletrpc.SendOutputsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.SendOutputsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.SendOutputsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.SendOutputsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.SendOutputsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRawTx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes raw_tx = 1;
 * @return {!(string|Uint8Array)}
 */
proto.walletrpc.SendOutputsResponse.prototype.getRawTx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes raw_tx = 1;
 * This is a type-conversion wrapper around `getRawTx()`
 * @return {string}
 */
proto.walletrpc.SendOutputsResponse.prototype.getRawTx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawTx()));
};


/**
 * optional bytes raw_tx = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawTx()`
 * @return {!Uint8Array}
 */
proto.walletrpc.SendOutputsResponse.prototype.getRawTx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawTx()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.walletrpc.SendOutputsResponse} returns this
 */
proto.walletrpc.SendOutputsResponse.prototype.setRawTx = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.EstimateFeeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.EstimateFeeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.EstimateFeeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.EstimateFeeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    confTarget: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.EstimateFeeRequest}
 */
proto.walletrpc.EstimateFeeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.EstimateFeeRequest;
  return proto.walletrpc.EstimateFeeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.EstimateFeeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.EstimateFeeRequest}
 */
proto.walletrpc.EstimateFeeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConfTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.EstimateFeeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.EstimateFeeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.EstimateFeeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.EstimateFeeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfTarget();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 conf_target = 1;
 * @return {number}
 */
proto.walletrpc.EstimateFeeRequest.prototype.getConfTarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.EstimateFeeRequest} returns this
 */
proto.walletrpc.EstimateFeeRequest.prototype.setConfTarget = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.EstimateFeeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.EstimateFeeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.EstimateFeeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.EstimateFeeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    satPerKw: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.EstimateFeeResponse}
 */
proto.walletrpc.EstimateFeeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.EstimateFeeResponse;
  return proto.walletrpc.EstimateFeeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.EstimateFeeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.EstimateFeeResponse}
 */
proto.walletrpc.EstimateFeeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSatPerKw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.EstimateFeeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.EstimateFeeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.EstimateFeeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.EstimateFeeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSatPerKw();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 sat_per_kw = 1;
 * @return {number}
 */
proto.walletrpc.EstimateFeeResponse.prototype.getSatPerKw = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.EstimateFeeResponse} returns this
 */
proto.walletrpc.EstimateFeeResponse.prototype.setSatPerKw = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.PendingSweep.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.PendingSweep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.PendingSweep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.PendingSweep.toObject = function(includeInstance, msg) {
  var f, obj = {
    outpoint: (f = msg.getOutpoint()) && lightning_pb.OutPoint.toObject(includeInstance, f),
    witnessType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    amountSat: jspb.Message.getFieldWithDefault(msg, 3, 0),
    satPerByte: jspb.Message.getFieldWithDefault(msg, 4, 0),
    broadcastAttempts: jspb.Message.getFieldWithDefault(msg, 5, 0),
    nextBroadcastHeight: jspb.Message.getFieldWithDefault(msg, 6, 0),
    requestedConfTarget: jspb.Message.getFieldWithDefault(msg, 8, 0),
    requestedSatPerByte: jspb.Message.getFieldWithDefault(msg, 9, 0),
    satPerVbyte: jspb.Message.getFieldWithDefault(msg, 10, 0),
    requestedSatPerVbyte: jspb.Message.getFieldWithDefault(msg, 11, 0),
    force: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.PendingSweep}
 */
proto.walletrpc.PendingSweep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.PendingSweep;
  return proto.walletrpc.PendingSweep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.PendingSweep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.PendingSweep}
 */
proto.walletrpc.PendingSweep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lightning_pb.OutPoint;
      reader.readMessage(value,lightning_pb.OutPoint.deserializeBinaryFromReader);
      msg.setOutpoint(value);
      break;
    case 2:
      var value = /** @type {!proto.walletrpc.WitnessType} */ (reader.readEnum());
      msg.setWitnessType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAmountSat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSatPerByte(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBroadcastAttempts(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNextBroadcastHeight(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestedConfTarget(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestedSatPerByte(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSatPerVbyte(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestedSatPerVbyte(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.PendingSweep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.PendingSweep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.PendingSweep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.PendingSweep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutpoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      lightning_pb.OutPoint.serializeBinaryToWriter
    );
  }
  f = message.getWitnessType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAmountSat();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSatPerByte();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getBroadcastAttempts();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getNextBroadcastHeight();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getRequestedConfTarget();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getRequestedSatPerByte();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getSatPerVbyte();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getRequestedSatPerVbyte();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getForce();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional lnrpc.OutPoint outpoint = 1;
 * @return {?proto.lnrpc.OutPoint}
 */
proto.walletrpc.PendingSweep.prototype.getOutpoint = function() {
  return /** @type{?proto.lnrpc.OutPoint} */ (
    jspb.Message.getWrapperField(this, lightning_pb.OutPoint, 1));
};


/**
 * @param {?proto.lnrpc.OutPoint|undefined} value
 * @return {!proto.walletrpc.PendingSweep} returns this
*/
proto.walletrpc.PendingSweep.prototype.setOutpoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.walletrpc.PendingSweep} returns this
 */
proto.walletrpc.PendingSweep.prototype.clearOutpoint = function() {
  return this.setOutpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.walletrpc.PendingSweep.prototype.hasOutpoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional WitnessType witness_type = 2;
 * @return {!proto.walletrpc.WitnessType}
 */
proto.walletrpc.PendingSweep.prototype.getWitnessType = function() {
  return /** @type {!proto.walletrpc.WitnessType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.walletrpc.WitnessType} value
 * @return {!proto.walletrpc.PendingSweep} returns this
 */
proto.walletrpc.PendingSweep.prototype.setWitnessType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 amount_sat = 3;
 * @return {number}
 */
proto.walletrpc.PendingSweep.prototype.getAmountSat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.PendingSweep} returns this
 */
proto.walletrpc.PendingSweep.prototype.setAmountSat = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 sat_per_byte = 4;
 * @return {number}
 */
proto.walletrpc.PendingSweep.prototype.getSatPerByte = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.PendingSweep} returns this
 */
proto.walletrpc.PendingSweep.prototype.setSatPerByte = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 broadcast_attempts = 5;
 * @return {number}
 */
proto.walletrpc.PendingSweep.prototype.getBroadcastAttempts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.PendingSweep} returns this
 */
proto.walletrpc.PendingSweep.prototype.setBroadcastAttempts = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 next_broadcast_height = 6;
 * @return {number}
 */
proto.walletrpc.PendingSweep.prototype.getNextBroadcastHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.PendingSweep} returns this
 */
proto.walletrpc.PendingSweep.prototype.setNextBroadcastHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 requested_conf_target = 8;
 * @return {number}
 */
proto.walletrpc.PendingSweep.prototype.getRequestedConfTarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.PendingSweep} returns this
 */
proto.walletrpc.PendingSweep.prototype.setRequestedConfTarget = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 requested_sat_per_byte = 9;
 * @return {number}
 */
proto.walletrpc.PendingSweep.prototype.getRequestedSatPerByte = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.PendingSweep} returns this
 */
proto.walletrpc.PendingSweep.prototype.setRequestedSatPerByte = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 sat_per_vbyte = 10;
 * @return {number}
 */
proto.walletrpc.PendingSweep.prototype.getSatPerVbyte = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.PendingSweep} returns this
 */
proto.walletrpc.PendingSweep.prototype.setSatPerVbyte = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 requested_sat_per_vbyte = 11;
 * @return {number}
 */
proto.walletrpc.PendingSweep.prototype.getRequestedSatPerVbyte = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.PendingSweep} returns this
 */
proto.walletrpc.PendingSweep.prototype.setRequestedSatPerVbyte = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional bool force = 7;
 * @return {boolean}
 */
proto.walletrpc.PendingSweep.prototype.getForce = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.walletrpc.PendingSweep} returns this
 */
proto.walletrpc.PendingSweep.prototype.setForce = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.PendingSweepsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.PendingSweepsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.PendingSweepsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.PendingSweepsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.PendingSweepsRequest}
 */
proto.walletrpc.PendingSweepsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.PendingSweepsRequest;
  return proto.walletrpc.PendingSweepsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.PendingSweepsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.PendingSweepsRequest}
 */
proto.walletrpc.PendingSweepsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.PendingSweepsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.PendingSweepsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.PendingSweepsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.PendingSweepsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.walletrpc.PendingSweepsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.PendingSweepsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.PendingSweepsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.PendingSweepsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.PendingSweepsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pendingSweepsList: jspb.Message.toObjectList(msg.getPendingSweepsList(),
    proto.walletrpc.PendingSweep.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.PendingSweepsResponse}
 */
proto.walletrpc.PendingSweepsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.PendingSweepsResponse;
  return proto.walletrpc.PendingSweepsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.PendingSweepsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.PendingSweepsResponse}
 */
proto.walletrpc.PendingSweepsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.walletrpc.PendingSweep;
      reader.readMessage(value,proto.walletrpc.PendingSweep.deserializeBinaryFromReader);
      msg.addPendingSweeps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.PendingSweepsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.PendingSweepsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.PendingSweepsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.PendingSweepsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPendingSweepsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.walletrpc.PendingSweep.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PendingSweep pending_sweeps = 1;
 * @return {!Array<!proto.walletrpc.PendingSweep>}
 */
proto.walletrpc.PendingSweepsResponse.prototype.getPendingSweepsList = function() {
  return /** @type{!Array<!proto.walletrpc.PendingSweep>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.walletrpc.PendingSweep, 1));
};


/**
 * @param {!Array<!proto.walletrpc.PendingSweep>} value
 * @return {!proto.walletrpc.PendingSweepsResponse} returns this
*/
proto.walletrpc.PendingSweepsResponse.prototype.setPendingSweepsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.walletrpc.PendingSweep=} opt_value
 * @param {number=} opt_index
 * @return {!proto.walletrpc.PendingSweep}
 */
proto.walletrpc.PendingSweepsResponse.prototype.addPendingSweeps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.walletrpc.PendingSweep, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.walletrpc.PendingSweepsResponse} returns this
 */
proto.walletrpc.PendingSweepsResponse.prototype.clearPendingSweepsList = function() {
  return this.setPendingSweepsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.BumpFeeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.BumpFeeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.BumpFeeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.BumpFeeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    outpoint: (f = msg.getOutpoint()) && lightning_pb.OutPoint.toObject(includeInstance, f),
    targetConf: jspb.Message.getFieldWithDefault(msg, 2, 0),
    satPerByte: jspb.Message.getFieldWithDefault(msg, 3, 0),
    force: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    satPerVbyte: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.BumpFeeRequest}
 */
proto.walletrpc.BumpFeeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.BumpFeeRequest;
  return proto.walletrpc.BumpFeeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.BumpFeeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.BumpFeeRequest}
 */
proto.walletrpc.BumpFeeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lightning_pb.OutPoint;
      reader.readMessage(value,lightning_pb.OutPoint.deserializeBinaryFromReader);
      msg.setOutpoint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTargetConf(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSatPerByte(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForce(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSatPerVbyte(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.BumpFeeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.BumpFeeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.BumpFeeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.BumpFeeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutpoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      lightning_pb.OutPoint.serializeBinaryToWriter
    );
  }
  f = message.getTargetConf();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSatPerByte();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getForce();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getSatPerVbyte();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional lnrpc.OutPoint outpoint = 1;
 * @return {?proto.lnrpc.OutPoint}
 */
proto.walletrpc.BumpFeeRequest.prototype.getOutpoint = function() {
  return /** @type{?proto.lnrpc.OutPoint} */ (
    jspb.Message.getWrapperField(this, lightning_pb.OutPoint, 1));
};


/**
 * @param {?proto.lnrpc.OutPoint|undefined} value
 * @return {!proto.walletrpc.BumpFeeRequest} returns this
*/
proto.walletrpc.BumpFeeRequest.prototype.setOutpoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.walletrpc.BumpFeeRequest} returns this
 */
proto.walletrpc.BumpFeeRequest.prototype.clearOutpoint = function() {
  return this.setOutpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.walletrpc.BumpFeeRequest.prototype.hasOutpoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 target_conf = 2;
 * @return {number}
 */
proto.walletrpc.BumpFeeRequest.prototype.getTargetConf = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.BumpFeeRequest} returns this
 */
proto.walletrpc.BumpFeeRequest.prototype.setTargetConf = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 sat_per_byte = 3;
 * @return {number}
 */
proto.walletrpc.BumpFeeRequest.prototype.getSatPerByte = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.BumpFeeRequest} returns this
 */
proto.walletrpc.BumpFeeRequest.prototype.setSatPerByte = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool force = 4;
 * @return {boolean}
 */
proto.walletrpc.BumpFeeRequest.prototype.getForce = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.walletrpc.BumpFeeRequest} returns this
 */
proto.walletrpc.BumpFeeRequest.prototype.setForce = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional uint64 sat_per_vbyte = 5;
 * @return {number}
 */
proto.walletrpc.BumpFeeRequest.prototype.getSatPerVbyte = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.BumpFeeRequest} returns this
 */
proto.walletrpc.BumpFeeRequest.prototype.setSatPerVbyte = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.BumpFeeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.BumpFeeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.BumpFeeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.BumpFeeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.BumpFeeResponse}
 */
proto.walletrpc.BumpFeeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.BumpFeeResponse;
  return proto.walletrpc.BumpFeeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.BumpFeeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.BumpFeeResponse}
 */
proto.walletrpc.BumpFeeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.BumpFeeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.BumpFeeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.BumpFeeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.BumpFeeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.ListSweepsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.ListSweepsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.ListSweepsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ListSweepsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    verbose: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.ListSweepsRequest}
 */
proto.walletrpc.ListSweepsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.ListSweepsRequest;
  return proto.walletrpc.ListSweepsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.ListSweepsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.ListSweepsRequest}
 */
proto.walletrpc.ListSweepsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVerbose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.ListSweepsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.ListSweepsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.ListSweepsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ListSweepsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerbose();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool verbose = 1;
 * @return {boolean}
 */
proto.walletrpc.ListSweepsRequest.prototype.getVerbose = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.walletrpc.ListSweepsRequest} returns this
 */
proto.walletrpc.ListSweepsRequest.prototype.setVerbose = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.walletrpc.ListSweepsResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.walletrpc.ListSweepsResponse.SweepsCase = {
  SWEEPS_NOT_SET: 0,
  TRANSACTION_DETAILS: 1,
  TRANSACTION_IDS: 2
};

/**
 * @return {proto.walletrpc.ListSweepsResponse.SweepsCase}
 */
proto.walletrpc.ListSweepsResponse.prototype.getSweepsCase = function() {
  return /** @type {proto.walletrpc.ListSweepsResponse.SweepsCase} */(jspb.Message.computeOneofCase(this, proto.walletrpc.ListSweepsResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.ListSweepsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.ListSweepsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.ListSweepsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ListSweepsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionDetails: (f = msg.getTransactionDetails()) && lightning_pb.TransactionDetails.toObject(includeInstance, f),
    transactionIds: (f = msg.getTransactionIds()) && proto.walletrpc.ListSweepsResponse.TransactionIDs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.ListSweepsResponse}
 */
proto.walletrpc.ListSweepsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.ListSweepsResponse;
  return proto.walletrpc.ListSweepsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.ListSweepsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.ListSweepsResponse}
 */
proto.walletrpc.ListSweepsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lightning_pb.TransactionDetails;
      reader.readMessage(value,lightning_pb.TransactionDetails.deserializeBinaryFromReader);
      msg.setTransactionDetails(value);
      break;
    case 2:
      var value = new proto.walletrpc.ListSweepsResponse.TransactionIDs;
      reader.readMessage(value,proto.walletrpc.ListSweepsResponse.TransactionIDs.deserializeBinaryFromReader);
      msg.setTransactionIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.ListSweepsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.ListSweepsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.ListSweepsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ListSweepsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionDetails();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      lightning_pb.TransactionDetails.serializeBinaryToWriter
    );
  }
  f = message.getTransactionIds();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.walletrpc.ListSweepsResponse.TransactionIDs.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.walletrpc.ListSweepsResponse.TransactionIDs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.ListSweepsResponse.TransactionIDs.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.ListSweepsResponse.TransactionIDs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.ListSweepsResponse.TransactionIDs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ListSweepsResponse.TransactionIDs.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.ListSweepsResponse.TransactionIDs}
 */
proto.walletrpc.ListSweepsResponse.TransactionIDs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.ListSweepsResponse.TransactionIDs;
  return proto.walletrpc.ListSweepsResponse.TransactionIDs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.ListSweepsResponse.TransactionIDs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.ListSweepsResponse.TransactionIDs}
 */
proto.walletrpc.ListSweepsResponse.TransactionIDs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTransactionIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.ListSweepsResponse.TransactionIDs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.ListSweepsResponse.TransactionIDs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.ListSweepsResponse.TransactionIDs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ListSweepsResponse.TransactionIDs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string transaction_ids = 1;
 * @return {!Array<string>}
 */
proto.walletrpc.ListSweepsResponse.TransactionIDs.prototype.getTransactionIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.walletrpc.ListSweepsResponse.TransactionIDs} returns this
 */
proto.walletrpc.ListSweepsResponse.TransactionIDs.prototype.setTransactionIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.walletrpc.ListSweepsResponse.TransactionIDs} returns this
 */
proto.walletrpc.ListSweepsResponse.TransactionIDs.prototype.addTransactionIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.walletrpc.ListSweepsResponse.TransactionIDs} returns this
 */
proto.walletrpc.ListSweepsResponse.TransactionIDs.prototype.clearTransactionIdsList = function() {
  return this.setTransactionIdsList([]);
};


/**
 * optional lnrpc.TransactionDetails transaction_details = 1;
 * @return {?proto.lnrpc.TransactionDetails}
 */
proto.walletrpc.ListSweepsResponse.prototype.getTransactionDetails = function() {
  return /** @type{?proto.lnrpc.TransactionDetails} */ (
    jspb.Message.getWrapperField(this, lightning_pb.TransactionDetails, 1));
};


/**
 * @param {?proto.lnrpc.TransactionDetails|undefined} value
 * @return {!proto.walletrpc.ListSweepsResponse} returns this
*/
proto.walletrpc.ListSweepsResponse.prototype.setTransactionDetails = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.walletrpc.ListSweepsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.walletrpc.ListSweepsResponse} returns this
 */
proto.walletrpc.ListSweepsResponse.prototype.clearTransactionDetails = function() {
  return this.setTransactionDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.walletrpc.ListSweepsResponse.prototype.hasTransactionDetails = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TransactionIDs transaction_ids = 2;
 * @return {?proto.walletrpc.ListSweepsResponse.TransactionIDs}
 */
proto.walletrpc.ListSweepsResponse.prototype.getTransactionIds = function() {
  return /** @type{?proto.walletrpc.ListSweepsResponse.TransactionIDs} */ (
    jspb.Message.getWrapperField(this, proto.walletrpc.ListSweepsResponse.TransactionIDs, 2));
};


/**
 * @param {?proto.walletrpc.ListSweepsResponse.TransactionIDs|undefined} value
 * @return {!proto.walletrpc.ListSweepsResponse} returns this
*/
proto.walletrpc.ListSweepsResponse.prototype.setTransactionIds = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.walletrpc.ListSweepsResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.walletrpc.ListSweepsResponse} returns this
 */
proto.walletrpc.ListSweepsResponse.prototype.clearTransactionIds = function() {
  return this.setTransactionIds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.walletrpc.ListSweepsResponse.prototype.hasTransactionIds = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.LabelTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.LabelTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.LabelTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.LabelTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    txid: msg.getTxid_asB64(),
    label: jspb.Message.getFieldWithDefault(msg, 2, ""),
    overwrite: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.LabelTransactionRequest}
 */
proto.walletrpc.LabelTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.LabelTransactionRequest;
  return proto.walletrpc.LabelTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.LabelTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.LabelTransactionRequest}
 */
proto.walletrpc.LabelTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOverwrite(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.LabelTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.LabelTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.LabelTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.LabelTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOverwrite();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bytes txid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.walletrpc.LabelTransactionRequest.prototype.getTxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes txid = 1;
 * This is a type-conversion wrapper around `getTxid()`
 * @return {string}
 */
proto.walletrpc.LabelTransactionRequest.prototype.getTxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxid()));
};


/**
 * optional bytes txid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxid()`
 * @return {!Uint8Array}
 */
proto.walletrpc.LabelTransactionRequest.prototype.getTxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.walletrpc.LabelTransactionRequest} returns this
 */
proto.walletrpc.LabelTransactionRequest.prototype.setTxid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string label = 2;
 * @return {string}
 */
proto.walletrpc.LabelTransactionRequest.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.walletrpc.LabelTransactionRequest} returns this
 */
proto.walletrpc.LabelTransactionRequest.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool overwrite = 3;
 * @return {boolean}
 */
proto.walletrpc.LabelTransactionRequest.prototype.getOverwrite = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.walletrpc.LabelTransactionRequest} returns this
 */
proto.walletrpc.LabelTransactionRequest.prototype.setOverwrite = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.LabelTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.LabelTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.LabelTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.LabelTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.LabelTransactionResponse}
 */
proto.walletrpc.LabelTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.LabelTransactionResponse;
  return proto.walletrpc.LabelTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.LabelTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.LabelTransactionResponse}
 */
proto.walletrpc.LabelTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.LabelTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.LabelTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.LabelTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.LabelTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.walletrpc.FundPsbtRequest.oneofGroups_ = [[1,2],[3,4]];

/**
 * @enum {number}
 */
proto.walletrpc.FundPsbtRequest.TemplateCase = {
  TEMPLATE_NOT_SET: 0,
  PSBT: 1,
  RAW: 2
};

/**
 * @return {proto.walletrpc.FundPsbtRequest.TemplateCase}
 */
proto.walletrpc.FundPsbtRequest.prototype.getTemplateCase = function() {
  return /** @type {proto.walletrpc.FundPsbtRequest.TemplateCase} */(jspb.Message.computeOneofCase(this, proto.walletrpc.FundPsbtRequest.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.walletrpc.FundPsbtRequest.FeesCase = {
  FEES_NOT_SET: 0,
  TARGET_CONF: 3,
  SAT_PER_VBYTE: 4
};

/**
 * @return {proto.walletrpc.FundPsbtRequest.FeesCase}
 */
proto.walletrpc.FundPsbtRequest.prototype.getFeesCase = function() {
  return /** @type {proto.walletrpc.FundPsbtRequest.FeesCase} */(jspb.Message.computeOneofCase(this, proto.walletrpc.FundPsbtRequest.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.FundPsbtRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.FundPsbtRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.FundPsbtRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.FundPsbtRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    psbt: msg.getPsbt_asB64(),
    raw: (f = msg.getRaw()) && proto.walletrpc.TxTemplate.toObject(includeInstance, f),
    targetConf: jspb.Message.getFieldWithDefault(msg, 3, 0),
    satPerVbyte: jspb.Message.getFieldWithDefault(msg, 4, 0),
    account: jspb.Message.getFieldWithDefault(msg, 5, ""),
    minConfs: jspb.Message.getFieldWithDefault(msg, 6, 0),
    spendUnconfirmed: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.FundPsbtRequest}
 */
proto.walletrpc.FundPsbtRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.FundPsbtRequest;
  return proto.walletrpc.FundPsbtRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.FundPsbtRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.FundPsbtRequest}
 */
proto.walletrpc.FundPsbtRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPsbt(value);
      break;
    case 2:
      var value = new proto.walletrpc.TxTemplate;
      reader.readMessage(value,proto.walletrpc.TxTemplate.deserializeBinaryFromReader);
      msg.setRaw(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTargetConf(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSatPerVbyte(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinConfs(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSpendUnconfirmed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.FundPsbtRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.FundPsbtRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.FundPsbtRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.FundPsbtRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRaw();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.walletrpc.TxTemplate.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getAccount();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMinConfs();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSpendUnconfirmed();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional bytes psbt = 1;
 * @return {!(string|Uint8Array)}
 */
proto.walletrpc.FundPsbtRequest.prototype.getPsbt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes psbt = 1;
 * This is a type-conversion wrapper around `getPsbt()`
 * @return {string}
 */
proto.walletrpc.FundPsbtRequest.prototype.getPsbt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPsbt()));
};


/**
 * optional bytes psbt = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPsbt()`
 * @return {!Uint8Array}
 */
proto.walletrpc.FundPsbtRequest.prototype.getPsbt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPsbt()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.walletrpc.FundPsbtRequest} returns this
 */
proto.walletrpc.FundPsbtRequest.prototype.setPsbt = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.walletrpc.FundPsbtRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.walletrpc.FundPsbtRequest} returns this
 */
proto.walletrpc.FundPsbtRequest.prototype.clearPsbt = function() {
  return jspb.Message.setOneofField(this, 1, proto.walletrpc.FundPsbtRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.walletrpc.FundPsbtRequest.prototype.hasPsbt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TxTemplate raw = 2;
 * @return {?proto.walletrpc.TxTemplate}
 */
proto.walletrpc.FundPsbtRequest.prototype.getRaw = function() {
  return /** @type{?proto.walletrpc.TxTemplate} */ (
    jspb.Message.getWrapperField(this, proto.walletrpc.TxTemplate, 2));
};


/**
 * @param {?proto.walletrpc.TxTemplate|undefined} value
 * @return {!proto.walletrpc.FundPsbtRequest} returns this
*/
proto.walletrpc.FundPsbtRequest.prototype.setRaw = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.walletrpc.FundPsbtRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.walletrpc.FundPsbtRequest} returns this
 */
proto.walletrpc.FundPsbtRequest.prototype.clearRaw = function() {
  return this.setRaw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.walletrpc.FundPsbtRequest.prototype.hasRaw = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 target_conf = 3;
 * @return {number}
 */
proto.walletrpc.FundPsbtRequest.prototype.getTargetConf = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.FundPsbtRequest} returns this
 */
proto.walletrpc.FundPsbtRequest.prototype.setTargetConf = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.walletrpc.FundPsbtRequest.oneofGroups_[1], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.walletrpc.FundPsbtRequest} returns this
 */
proto.walletrpc.FundPsbtRequest.prototype.clearTargetConf = function() {
  return jspb.Message.setOneofField(this, 3, proto.walletrpc.FundPsbtRequest.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.walletrpc.FundPsbtRequest.prototype.hasTargetConf = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 sat_per_vbyte = 4;
 * @return {number}
 */
proto.walletrpc.FundPsbtRequest.prototype.getSatPerVbyte = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.FundPsbtRequest} returns this
 */
proto.walletrpc.FundPsbtRequest.prototype.setSatPerVbyte = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.walletrpc.FundPsbtRequest.oneofGroups_[1], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.walletrpc.FundPsbtRequest} returns this
 */
proto.walletrpc.FundPsbtRequest.prototype.clearSatPerVbyte = function() {
  return jspb.Message.setOneofField(this, 4, proto.walletrpc.FundPsbtRequest.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.walletrpc.FundPsbtRequest.prototype.hasSatPerVbyte = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string account = 5;
 * @return {string}
 */
proto.walletrpc.FundPsbtRequest.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.walletrpc.FundPsbtRequest} returns this
 */
proto.walletrpc.FundPsbtRequest.prototype.setAccount = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 min_confs = 6;
 * @return {number}
 */
proto.walletrpc.FundPsbtRequest.prototype.getMinConfs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.FundPsbtRequest} returns this
 */
proto.walletrpc.FundPsbtRequest.prototype.setMinConfs = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool spend_unconfirmed = 7;
 * @return {boolean}
 */
proto.walletrpc.FundPsbtRequest.prototype.getSpendUnconfirmed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.walletrpc.FundPsbtRequest} returns this
 */
proto.walletrpc.FundPsbtRequest.prototype.setSpendUnconfirmed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.walletrpc.FundPsbtResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.FundPsbtResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.FundPsbtResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.FundPsbtResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.FundPsbtResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fundedPsbt: msg.getFundedPsbt_asB64(),
    changeOutputIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lockedUtxosList: jspb.Message.toObjectList(msg.getLockedUtxosList(),
    proto.walletrpc.UtxoLease.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.FundPsbtResponse}
 */
proto.walletrpc.FundPsbtResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.FundPsbtResponse;
  return proto.walletrpc.FundPsbtResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.FundPsbtResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.FundPsbtResponse}
 */
proto.walletrpc.FundPsbtResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFundedPsbt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChangeOutputIndex(value);
      break;
    case 3:
      var value = new proto.walletrpc.UtxoLease;
      reader.readMessage(value,proto.walletrpc.UtxoLease.deserializeBinaryFromReader);
      msg.addLockedUtxos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.FundPsbtResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.FundPsbtResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.FundPsbtResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.FundPsbtResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFundedPsbt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getChangeOutputIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLockedUtxosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.walletrpc.UtxoLease.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes funded_psbt = 1;
 * @return {!(string|Uint8Array)}
 */
proto.walletrpc.FundPsbtResponse.prototype.getFundedPsbt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes funded_psbt = 1;
 * This is a type-conversion wrapper around `getFundedPsbt()`
 * @return {string}
 */
proto.walletrpc.FundPsbtResponse.prototype.getFundedPsbt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFundedPsbt()));
};


/**
 * optional bytes funded_psbt = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFundedPsbt()`
 * @return {!Uint8Array}
 */
proto.walletrpc.FundPsbtResponse.prototype.getFundedPsbt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFundedPsbt()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.walletrpc.FundPsbtResponse} returns this
 */
proto.walletrpc.FundPsbtResponse.prototype.setFundedPsbt = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 change_output_index = 2;
 * @return {number}
 */
proto.walletrpc.FundPsbtResponse.prototype.getChangeOutputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.FundPsbtResponse} returns this
 */
proto.walletrpc.FundPsbtResponse.prototype.setChangeOutputIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated UtxoLease locked_utxos = 3;
 * @return {!Array<!proto.walletrpc.UtxoLease>}
 */
proto.walletrpc.FundPsbtResponse.prototype.getLockedUtxosList = function() {
  return /** @type{!Array<!proto.walletrpc.UtxoLease>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.walletrpc.UtxoLease, 3));
};


/**
 * @param {!Array<!proto.walletrpc.UtxoLease>} value
 * @return {!proto.walletrpc.FundPsbtResponse} returns this
*/
proto.walletrpc.FundPsbtResponse.prototype.setLockedUtxosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.walletrpc.UtxoLease=} opt_value
 * @param {number=} opt_index
 * @return {!proto.walletrpc.UtxoLease}
 */
proto.walletrpc.FundPsbtResponse.prototype.addLockedUtxos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.walletrpc.UtxoLease, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.walletrpc.FundPsbtResponse} returns this
 */
proto.walletrpc.FundPsbtResponse.prototype.clearLockedUtxosList = function() {
  return this.setLockedUtxosList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.walletrpc.TxTemplate.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.TxTemplate.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.TxTemplate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.TxTemplate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.TxTemplate.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    lightning_pb.OutPoint.toObject, includeInstance),
    outputsMap: (f = msg.getOutputsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.TxTemplate}
 */
proto.walletrpc.TxTemplate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.TxTemplate;
  return proto.walletrpc.TxTemplate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.TxTemplate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.TxTemplate}
 */
proto.walletrpc.TxTemplate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lightning_pb.OutPoint;
      reader.readMessage(value,lightning_pb.OutPoint.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 2:
      var value = msg.getOutputsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint64, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.TxTemplate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.TxTemplate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.TxTemplate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.TxTemplate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      lightning_pb.OutPoint.serializeBinaryToWriter
    );
  }
  f = message.getOutputsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint64);
  }
};


/**
 * repeated lnrpc.OutPoint inputs = 1;
 * @return {!Array<!proto.lnrpc.OutPoint>}
 */
proto.walletrpc.TxTemplate.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.lnrpc.OutPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, lightning_pb.OutPoint, 1));
};


/**
 * @param {!Array<!proto.lnrpc.OutPoint>} value
 * @return {!proto.walletrpc.TxTemplate} returns this
*/
proto.walletrpc.TxTemplate.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.lnrpc.OutPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lnrpc.OutPoint}
 */
proto.walletrpc.TxTemplate.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.lnrpc.OutPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.walletrpc.TxTemplate} returns this
 */
proto.walletrpc.TxTemplate.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};


/**
 * map<string, uint64> outputs = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.walletrpc.TxTemplate.prototype.getOutputsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.walletrpc.TxTemplate} returns this
 */
proto.walletrpc.TxTemplate.prototype.clearOutputsMap = function() {
  this.getOutputsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.UtxoLease.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.UtxoLease.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.UtxoLease} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.UtxoLease.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    outpoint: (f = msg.getOutpoint()) && lightning_pb.OutPoint.toObject(includeInstance, f),
    expiration: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.UtxoLease}
 */
proto.walletrpc.UtxoLease.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.UtxoLease;
  return proto.walletrpc.UtxoLease.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.UtxoLease} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.UtxoLease}
 */
proto.walletrpc.UtxoLease.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = new lightning_pb.OutPoint;
      reader.readMessage(value,lightning_pb.OutPoint.deserializeBinaryFromReader);
      msg.setOutpoint(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpiration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.UtxoLease.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.UtxoLease.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.UtxoLease} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.UtxoLease.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getOutpoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lightning_pb.OutPoint.serializeBinaryToWriter
    );
  }
  f = message.getExpiration();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.walletrpc.UtxoLease.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.walletrpc.UtxoLease.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.walletrpc.UtxoLease.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.walletrpc.UtxoLease} returns this
 */
proto.walletrpc.UtxoLease.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional lnrpc.OutPoint outpoint = 2;
 * @return {?proto.lnrpc.OutPoint}
 */
proto.walletrpc.UtxoLease.prototype.getOutpoint = function() {
  return /** @type{?proto.lnrpc.OutPoint} */ (
    jspb.Message.getWrapperField(this, lightning_pb.OutPoint, 2));
};


/**
 * @param {?proto.lnrpc.OutPoint|undefined} value
 * @return {!proto.walletrpc.UtxoLease} returns this
*/
proto.walletrpc.UtxoLease.prototype.setOutpoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.walletrpc.UtxoLease} returns this
 */
proto.walletrpc.UtxoLease.prototype.clearOutpoint = function() {
  return this.setOutpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.walletrpc.UtxoLease.prototype.hasOutpoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 expiration = 3;
 * @return {number}
 */
proto.walletrpc.UtxoLease.prototype.getExpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.walletrpc.UtxoLease} returns this
 */
proto.walletrpc.UtxoLease.prototype.setExpiration = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.SignPsbtRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.SignPsbtRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.SignPsbtRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.SignPsbtRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fundedPsbt: msg.getFundedPsbt_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.SignPsbtRequest}
 */
proto.walletrpc.SignPsbtRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.SignPsbtRequest;
  return proto.walletrpc.SignPsbtRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.SignPsbtRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.SignPsbtRequest}
 */
proto.walletrpc.SignPsbtRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFundedPsbt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.SignPsbtRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.SignPsbtRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.SignPsbtRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.SignPsbtRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFundedPsbt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes funded_psbt = 1;
 * @return {!(string|Uint8Array)}
 */
proto.walletrpc.SignPsbtRequest.prototype.getFundedPsbt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes funded_psbt = 1;
 * This is a type-conversion wrapper around `getFundedPsbt()`
 * @return {string}
 */
proto.walletrpc.SignPsbtRequest.prototype.getFundedPsbt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFundedPsbt()));
};


/**
 * optional bytes funded_psbt = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFundedPsbt()`
 * @return {!Uint8Array}
 */
proto.walletrpc.SignPsbtRequest.prototype.getFundedPsbt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFundedPsbt()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.walletrpc.SignPsbtRequest} returns this
 */
proto.walletrpc.SignPsbtRequest.prototype.setFundedPsbt = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.SignPsbtResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.SignPsbtResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.SignPsbtResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.SignPsbtResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    signedPsbt: msg.getSignedPsbt_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.SignPsbtResponse}
 */
proto.walletrpc.SignPsbtResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.SignPsbtResponse;
  return proto.walletrpc.SignPsbtResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.SignPsbtResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.SignPsbtResponse}
 */
proto.walletrpc.SignPsbtResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignedPsbt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.SignPsbtResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.SignPsbtResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.SignPsbtResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.SignPsbtResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignedPsbt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes signed_psbt = 1;
 * @return {!(string|Uint8Array)}
 */
proto.walletrpc.SignPsbtResponse.prototype.getSignedPsbt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes signed_psbt = 1;
 * This is a type-conversion wrapper around `getSignedPsbt()`
 * @return {string}
 */
proto.walletrpc.SignPsbtResponse.prototype.getSignedPsbt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignedPsbt()));
};


/**
 * optional bytes signed_psbt = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignedPsbt()`
 * @return {!Uint8Array}
 */
proto.walletrpc.SignPsbtResponse.prototype.getSignedPsbt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignedPsbt()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.walletrpc.SignPsbtResponse} returns this
 */
proto.walletrpc.SignPsbtResponse.prototype.setSignedPsbt = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.FinalizePsbtRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.FinalizePsbtRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.FinalizePsbtRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.FinalizePsbtRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fundedPsbt: msg.getFundedPsbt_asB64(),
    account: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.FinalizePsbtRequest}
 */
proto.walletrpc.FinalizePsbtRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.FinalizePsbtRequest;
  return proto.walletrpc.FinalizePsbtRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.FinalizePsbtRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.FinalizePsbtRequest}
 */
proto.walletrpc.FinalizePsbtRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFundedPsbt(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.FinalizePsbtRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.FinalizePsbtRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.FinalizePsbtRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.FinalizePsbtRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFundedPsbt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAccount();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional bytes funded_psbt = 1;
 * @return {!(string|Uint8Array)}
 */
proto.walletrpc.FinalizePsbtRequest.prototype.getFundedPsbt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes funded_psbt = 1;
 * This is a type-conversion wrapper around `getFundedPsbt()`
 * @return {string}
 */
proto.walletrpc.FinalizePsbtRequest.prototype.getFundedPsbt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFundedPsbt()));
};


/**
 * optional bytes funded_psbt = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFundedPsbt()`
 * @return {!Uint8Array}
 */
proto.walletrpc.FinalizePsbtRequest.prototype.getFundedPsbt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFundedPsbt()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.walletrpc.FinalizePsbtRequest} returns this
 */
proto.walletrpc.FinalizePsbtRequest.prototype.setFundedPsbt = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string account = 5;
 * @return {string}
 */
proto.walletrpc.FinalizePsbtRequest.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.walletrpc.FinalizePsbtRequest} returns this
 */
proto.walletrpc.FinalizePsbtRequest.prototype.setAccount = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.FinalizePsbtResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.FinalizePsbtResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.FinalizePsbtResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.FinalizePsbtResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    signedPsbt: msg.getSignedPsbt_asB64(),
    rawFinalTx: msg.getRawFinalTx_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.FinalizePsbtResponse}
 */
proto.walletrpc.FinalizePsbtResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.FinalizePsbtResponse;
  return proto.walletrpc.FinalizePsbtResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.FinalizePsbtResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.FinalizePsbtResponse}
 */
proto.walletrpc.FinalizePsbtResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignedPsbt(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawFinalTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.FinalizePsbtResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.FinalizePsbtResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.FinalizePsbtResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.FinalizePsbtResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignedPsbt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRawFinalTx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes signed_psbt = 1;
 * @return {!(string|Uint8Array)}
 */
proto.walletrpc.FinalizePsbtResponse.prototype.getSignedPsbt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes signed_psbt = 1;
 * This is a type-conversion wrapper around `getSignedPsbt()`
 * @return {string}
 */
proto.walletrpc.FinalizePsbtResponse.prototype.getSignedPsbt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignedPsbt()));
};


/**
 * optional bytes signed_psbt = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignedPsbt()`
 * @return {!Uint8Array}
 */
proto.walletrpc.FinalizePsbtResponse.prototype.getSignedPsbt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignedPsbt()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.walletrpc.FinalizePsbtResponse} returns this
 */
proto.walletrpc.FinalizePsbtResponse.prototype.setSignedPsbt = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes raw_final_tx = 2;
 * @return {!(string|Uint8Array)}
 */
proto.walletrpc.FinalizePsbtResponse.prototype.getRawFinalTx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes raw_final_tx = 2;
 * This is a type-conversion wrapper around `getRawFinalTx()`
 * @return {string}
 */
proto.walletrpc.FinalizePsbtResponse.prototype.getRawFinalTx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawFinalTx()));
};


/**
 * optional bytes raw_final_tx = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawFinalTx()`
 * @return {!Uint8Array}
 */
proto.walletrpc.FinalizePsbtResponse.prototype.getRawFinalTx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawFinalTx()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.walletrpc.FinalizePsbtResponse} returns this
 */
proto.walletrpc.FinalizePsbtResponse.prototype.setRawFinalTx = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.ListLeasesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.ListLeasesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.ListLeasesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ListLeasesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.ListLeasesRequest}
 */
proto.walletrpc.ListLeasesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.ListLeasesRequest;
  return proto.walletrpc.ListLeasesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.ListLeasesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.ListLeasesRequest}
 */
proto.walletrpc.ListLeasesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.ListLeasesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.ListLeasesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.ListLeasesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ListLeasesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.walletrpc.ListLeasesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.walletrpc.ListLeasesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.walletrpc.ListLeasesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.walletrpc.ListLeasesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ListLeasesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    lockedUtxosList: jspb.Message.toObjectList(msg.getLockedUtxosList(),
    proto.walletrpc.UtxoLease.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.walletrpc.ListLeasesResponse}
 */
proto.walletrpc.ListLeasesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.walletrpc.ListLeasesResponse;
  return proto.walletrpc.ListLeasesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.walletrpc.ListLeasesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.walletrpc.ListLeasesResponse}
 */
proto.walletrpc.ListLeasesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.walletrpc.UtxoLease;
      reader.readMessage(value,proto.walletrpc.UtxoLease.deserializeBinaryFromReader);
      msg.addLockedUtxos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.walletrpc.ListLeasesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.walletrpc.ListLeasesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.walletrpc.ListLeasesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.walletrpc.ListLeasesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLockedUtxosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.walletrpc.UtxoLease.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UtxoLease locked_utxos = 1;
 * @return {!Array<!proto.walletrpc.UtxoLease>}
 */
proto.walletrpc.ListLeasesResponse.prototype.getLockedUtxosList = function() {
  return /** @type{!Array<!proto.walletrpc.UtxoLease>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.walletrpc.UtxoLease, 1));
};


/**
 * @param {!Array<!proto.walletrpc.UtxoLease>} value
 * @return {!proto.walletrpc.ListLeasesResponse} returns this
*/
proto.walletrpc.ListLeasesResponse.prototype.setLockedUtxosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.walletrpc.UtxoLease=} opt_value
 * @param {number=} opt_index
 * @return {!proto.walletrpc.UtxoLease}
 */
proto.walletrpc.ListLeasesResponse.prototype.addLockedUtxos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.walletrpc.UtxoLease, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.walletrpc.ListLeasesResponse} returns this
 */
proto.walletrpc.ListLeasesResponse.prototype.clearLockedUtxosList = function() {
  return this.setLockedUtxosList([]);
};


/**
 * @enum {number}
 */
proto.walletrpc.AddressType = {
  UNKNOWN: 0,
  WITNESS_PUBKEY_HASH: 1,
  NESTED_WITNESS_PUBKEY_HASH: 2,
  HYBRID_NESTED_WITNESS_PUBKEY_HASH: 3
};

/**
 * @enum {number}
 */
proto.walletrpc.WitnessType = {
  UNKNOWN_WITNESS: 0,
  COMMITMENT_TIME_LOCK: 1,
  COMMITMENT_NO_DELAY: 2,
  COMMITMENT_REVOKE: 3,
  HTLC_OFFERED_REVOKE: 4,
  HTLC_ACCEPTED_REVOKE: 5,
  HTLC_OFFERED_TIMEOUT_SECOND_LEVEL: 6,
  HTLC_ACCEPTED_SUCCESS_SECOND_LEVEL: 7,
  HTLC_OFFERED_REMOTE_TIMEOUT: 8,
  HTLC_ACCEPTED_REMOTE_SUCCESS: 9,
  HTLC_SECOND_LEVEL_REVOKE: 10,
  WITNESS_KEY_HASH: 11,
  NESTED_WITNESS_KEY_HASH: 12,
  COMMITMENT_ANCHOR: 13
};

goog.object.extend(exports, proto.walletrpc);
